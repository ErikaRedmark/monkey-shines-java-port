// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/erikaredmark/monkeyshines/encoder/proto/world_file_format.proto

package org.erikaredmark.monkeyshines.encoder.proto;

@SuppressWarnings("all")
public final class WorldFormatProtos {
  private WorldFormatProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface WorldOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple> 
        getGoodiesList();
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple getGoodies(int index);
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    int getGoodiesCount();
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder> 
        getGoodiesOrBuilderList();
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder getGoodiesOrBuilder(
        int index);

    // repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple> 
        getLevelsList();
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple getLevels(int index);
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    int getLevelsCount();
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder> 
        getLevelsOrBuilderList();
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder getLevelsOrBuilder(
        int index);

    // repeated .monkeyshines.World.Hazard hazards = 4;
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard> 
        getHazardsList();
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard getHazards(int index);
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    int getHazardsCount();
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder> 
        getHazardsOrBuilderList();
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder getHazardsOrBuilder(
        int index);

    // optional uint32 bonus_screen = 5;
    /**
     * <code>optional uint32 bonus_screen = 5;</code>
     *
     * <pre>
     * In the original game, this was always 10000. In fact, new levels
     * default to 10000
     * </pre>
     */
    boolean hasBonusScreen();
    /**
     * <code>optional uint32 bonus_screen = 5;</code>
     *
     * <pre>
     * In the original game, this was always 10000. In fact, new levels
     * default to 10000
     * </pre>
     */
    int getBonusScreen();

    // optional string author = 6;
    /**
     * <code>optional string author = 6;</code>
     *
     * <pre>
     * Following fields were not available in original:
     * </pre>
     */
    boolean hasAuthor();
    /**
     * <code>optional string author = 6;</code>
     *
     * <pre>
     * Following fields were not available in original:
     * </pre>
     */
    java.lang.String getAuthor();
    /**
     * <code>optional string author = 6;</code>
     *
     * <pre>
     * Following fields were not available in original:
     * </pre>
     */
    com.google.protobuf.ByteString
        getAuthorBytes();

    // optional uint32 return_screen = 7;
    /**
     * <code>optional uint32 return_screen = 7;</code>
     *
     * <pre>
     * Added as an attempt to make bonus screens, but is now calculated
     * dynamically. The value still exists in the world but is set during
     * gameplay.
     * </pre>
     */
    boolean hasReturnScreen();
    /**
     * <code>optional uint32 return_screen = 7;</code>
     *
     * <pre>
     * Added as an attempt to make bonus screens, but is now calculated
     * dynamically. The value still exists in the world but is set during
     * gameplay.
     * </pre>
     */
    int getReturnScreen();
  }
  /**
   * Protobuf type {@code monkeyshines.World}
   *
   * <pre>
   * compile with
   * protoc -I=src --java_out=src src/org/erikaredmark/monkeyshines/encoder/proto/world_file_format.proto
   * </pre>
   */
  public static final class World extends
      com.google.protobuf.GeneratedMessage
      implements WorldOrBuilder {
    // Use World.newBuilder() to construct.
    private World(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private World(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final World defaultInstance;
    public static World getDefaultInstance() {
      return defaultInstance;
    }

    public World getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private World(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                goodies_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple>();
                mutable_bitField0_ |= 0x00000002;
              }
              goodies_.add(input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                levels_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple>();
                mutable_bitField0_ |= 0x00000004;
              }
              levels_.add(input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                hazards_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard>();
                mutable_bitField0_ |= 0x00000008;
              }
              hazards_.add(input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              bonusScreen_ = input.readUInt32();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000004;
              author_ = input.readBytes();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              returnScreen_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          goodies_ = java.util.Collections.unmodifiableList(goodies_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          levels_ = java.util.Collections.unmodifiableList(levels_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          hazards_ = java.util.Collections.unmodifiableList(hazards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Builder.class);
    }

    public static com.google.protobuf.Parser<World> PARSER =
        new com.google.protobuf.AbstractParser<World>() {
      public World parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new World(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<World> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code monkeyshines.World.DeathAnimation}
     */
    public enum DeathAnimation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL_DEATH = 0;</code>
       */
      NORMAL_DEATH(0, 0),
      /**
       * <code>BEE = 1;</code>
       */
      BEE(1, 1),
      /**
       * <code>BURN = 2;</code>
       */
      BURN(2, 2),
      /**
       * <code>ELECTRIC = 3;</code>
       */
      ELECTRIC(3, 3),
      ;

      /**
       * <code>NORMAL_DEATH = 0;</code>
       */
      public static final int NORMAL_DEATH_VALUE = 0;
      /**
       * <code>BEE = 1;</code>
       */
      public static final int BEE_VALUE = 1;
      /**
       * <code>BURN = 2;</code>
       */
      public static final int BURN_VALUE = 2;
      /**
       * <code>ELECTRIC = 3;</code>
       */
      public static final int ELECTRIC_VALUE = 3;


      public final int getNumber() { return value; }

      public static DeathAnimation valueOf(int value) {
        switch (value) {
          case 0: return NORMAL_DEATH;
          case 1: return BEE;
          case 2: return BURN;
          case 3: return ELECTRIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DeathAnimation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DeathAnimation>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DeathAnimation>() {
              public DeathAnimation findValueByNumber(int number) {
                return DeathAnimation.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(0);
      }

      private static final DeathAnimation[] VALUES = values();

      public static DeathAnimation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DeathAnimation(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.DeathAnimation)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.BackgroundType}
     */
    public enum BackgroundType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PATTERN = 1;</code>
       */
      PATTERN(0, 1),
      /**
       * <code>FULL = 2;</code>
       */
      FULL(1, 2),
      /**
       * <code>SOLID_COLOR = 3;</code>
       */
      SOLID_COLOR(2, 3),
      ;

      /**
       * <code>PATTERN = 1;</code>
       */
      public static final int PATTERN_VALUE = 1;
      /**
       * <code>FULL = 2;</code>
       */
      public static final int FULL_VALUE = 2;
      /**
       * <code>SOLID_COLOR = 3;</code>
       */
      public static final int SOLID_COLOR_VALUE = 3;


      public final int getNumber() { return value; }

      public static BackgroundType valueOf(int value) {
        switch (value) {
          case 1: return PATTERN;
          case 2: return FULL;
          case 3: return SOLID_COLOR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BackgroundType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<BackgroundType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BackgroundType>() {
              public BackgroundType findValueByNumber(int number) {
                return BackgroundType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(1);
      }

      private static final BackgroundType[] VALUES = values();

      public static BackgroundType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private BackgroundType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.BackgroundType)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.AnimationType}
     */
    public enum AnimationType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INCREASING_FRAMES = 1;</code>
       */
      INCREASING_FRAMES(0, 1),
      /**
       * <code>CYLCING_FRAMES = 2;</code>
       */
      CYLCING_FRAMES(1, 2),
      ;

      /**
       * <code>INCREASING_FRAMES = 1;</code>
       */
      public static final int INCREASING_FRAMES_VALUE = 1;
      /**
       * <code>CYLCING_FRAMES = 2;</code>
       */
      public static final int CYLCING_FRAMES_VALUE = 2;


      public final int getNumber() { return value; }

      public static AnimationType valueOf(int value) {
        switch (value) {
          case 1: return INCREASING_FRAMES;
          case 2: return CYLCING_FRAMES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AnimationType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AnimationType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AnimationType>() {
              public AnimationType findValueByNumber(int number) {
                return AnimationType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(2);
      }

      private static final AnimationType[] VALUES = values();

      public static AnimationType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private AnimationType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.AnimationType)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.AnimationSpeed}
     *
     * <pre>
     * Original game had only two animation speeds. In the future it
     * is possible this can be deprecated and replaced with just a
     * number of ticks per frame.
     * </pre>
     */
    public enum AnimationSpeed
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL_SPEED = 1;</code>
       */
      NORMAL_SPEED(0, 1),
      /**
       * <code>SLOW = 2;</code>
       */
      SLOW(1, 2),
      ;

      /**
       * <code>NORMAL_SPEED = 1;</code>
       */
      public static final int NORMAL_SPEED_VALUE = 1;
      /**
       * <code>SLOW = 2;</code>
       */
      public static final int SLOW_VALUE = 2;


      public final int getNumber() { return value; }

      public static AnimationSpeed valueOf(int value) {
        switch (value) {
          case 1: return NORMAL_SPEED;
          case 2: return SLOW;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AnimationSpeed>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AnimationSpeed>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AnimationSpeed>() {
              public AnimationSpeed findValueByNumber(int number) {
                return AnimationSpeed.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(3);
      }

      private static final AnimationSpeed[] VALUES = values();

      public static AnimationSpeed valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private AnimationSpeed(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.AnimationSpeed)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.ForcedDirection}
     */
    public enum ForcedDirection
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FORCED_NONE = 1;</code>
       */
      FORCED_NONE(0, 1),
      /**
       * <code>FORCED_RIGHT = 2;</code>
       */
      FORCED_RIGHT(1, 2),
      /**
       * <code>FORCED_LEFT = 3;</code>
       */
      FORCED_LEFT(2, 3),
      ;

      /**
       * <code>FORCED_NONE = 1;</code>
       */
      public static final int FORCED_NONE_VALUE = 1;
      /**
       * <code>FORCED_RIGHT = 2;</code>
       */
      public static final int FORCED_RIGHT_VALUE = 2;
      /**
       * <code>FORCED_LEFT = 3;</code>
       */
      public static final int FORCED_LEFT_VALUE = 3;


      public final int getNumber() { return value; }

      public static ForcedDirection valueOf(int value) {
        switch (value) {
          case 1: return FORCED_NONE;
          case 2: return FORCED_RIGHT;
          case 3: return FORCED_LEFT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ForcedDirection>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ForcedDirection>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ForcedDirection>() {
              public ForcedDirection findValueByNumber(int number) {
                return ForcedDirection.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(4);
      }

      private static final ForcedDirection[] VALUES = values();

      public static ForcedDirection valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ForcedDirection(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.ForcedDirection)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.SpriteType}
     */
    public enum SpriteType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL = 1;</code>
       */
      NORMAL(0, 1),
      /**
       * <code>HEALTH_DRAIN = 2;</code>
       */
      HEALTH_DRAIN(1, 2),
      /**
       * <code>EXIT_DOOR = 3;</code>
       */
      EXIT_DOOR(2, 3),
      /**
       * <code>BONUS_DOOR = 4;</code>
       */
      BONUS_DOOR(3, 4),
      /**
       * <code>SCENERY_SPRITE = 5;</code>
       *
       * <pre>
       * Not part of original game; a sprite that doesn't hurt. Can be
       * used maybe to add some extra detail to levels. MAY be a surprise
       * to players.
       * </pre>
       */
      SCENERY_SPRITE(4, 5),
      ;

      /**
       * <code>NORMAL = 1;</code>
       */
      public static final int NORMAL_VALUE = 1;
      /**
       * <code>HEALTH_DRAIN = 2;</code>
       */
      public static final int HEALTH_DRAIN_VALUE = 2;
      /**
       * <code>EXIT_DOOR = 3;</code>
       */
      public static final int EXIT_DOOR_VALUE = 3;
      /**
       * <code>BONUS_DOOR = 4;</code>
       */
      public static final int BONUS_DOOR_VALUE = 4;
      /**
       * <code>SCENERY_SPRITE = 5;</code>
       *
       * <pre>
       * Not part of original game; a sprite that doesn't hurt. Can be
       * used maybe to add some extra detail to levels. MAY be a surprise
       * to players.
       * </pre>
       */
      public static final int SCENERY_SPRITE_VALUE = 5;


      public final int getNumber() { return value; }

      public static SpriteType valueOf(int value) {
        switch (value) {
          case 1: return NORMAL;
          case 2: return HEALTH_DRAIN;
          case 3: return EXIT_DOOR;
          case 4: return BONUS_DOOR;
          case 5: return SCENERY_SPRITE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SpriteType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SpriteType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SpriteType>() {
              public SpriteType findValueByNumber(int number) {
                return SpriteType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(5);
      }

      private static final SpriteType[] VALUES = values();

      public static SpriteType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SpriteType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.SpriteType)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.TileType}
     */
    public enum TileType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SOLID = 1;</code>
       */
      SOLID(0, 1),
      /**
       * <code>THRU = 2;</code>
       */
      THRU(1, 2),
      /**
       * <code>SCENERY = 3;</code>
       */
      SCENERY(2, 3),
      /**
       * <code>HAZARD = 4;</code>
       */
      HAZARD(3, 4),
      /**
       * <code>CONVEYER = 5;</code>
       */
      CONVEYER(4, 5),
      /**
       * <code>BREAKING = 6;</code>
       */
      BREAKING(5, 6),
      /**
       * <code>NONE = 7;</code>
       */
      NONE(6, 7),
      ;

      /**
       * <code>SOLID = 1;</code>
       */
      public static final int SOLID_VALUE = 1;
      /**
       * <code>THRU = 2;</code>
       */
      public static final int THRU_VALUE = 2;
      /**
       * <code>SCENERY = 3;</code>
       */
      public static final int SCENERY_VALUE = 3;
      /**
       * <code>HAZARD = 4;</code>
       */
      public static final int HAZARD_VALUE = 4;
      /**
       * <code>CONVEYER = 5;</code>
       */
      public static final int CONVEYER_VALUE = 5;
      /**
       * <code>BREAKING = 6;</code>
       */
      public static final int BREAKING_VALUE = 6;
      /**
       * <code>NONE = 7;</code>
       */
      public static final int NONE_VALUE = 7;


      public final int getNumber() { return value; }

      public static TileType valueOf(int value) {
        switch (value) {
          case 1: return SOLID;
          case 2: return THRU;
          case 3: return SCENERY;
          case 4: return HAZARD;
          case 5: return CONVEYER;
          case 6: return BREAKING;
          case 7: return NONE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TileType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TileType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TileType>() {
              public TileType findValueByNumber(int number) {
                return TileType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(6);
      }

      private static final TileType[] VALUES = values();

      public static TileType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TileType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.TileType)
    }

    /**
     * Protobuf enum {@code monkeyshines.World.Rotation}
     */
    public enum Rotation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CLOCKWISE = 1;</code>
       */
      CLOCKWISE(0, 1),
      /**
       * <code>ANTI_CLOCKWISE = 2;</code>
       */
      ANTI_CLOCKWISE(1, 2),
      ;

      /**
       * <code>CLOCKWISE = 1;</code>
       */
      public static final int CLOCKWISE_VALUE = 1;
      /**
       * <code>ANTI_CLOCKWISE = 2;</code>
       */
      public static final int ANTI_CLOCKWISE_VALUE = 2;


      public final int getNumber() { return value; }

      public static Rotation valueOf(int value) {
        switch (value) {
          case 1: return CLOCKWISE;
          case 2: return ANTI_CLOCKWISE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Rotation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Rotation>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Rotation>() {
              public Rotation findValueByNumber(int number) {
                return Rotation.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDescriptor().getEnumTypes().get(7);
      }

      private static final Rotation[] VALUES = values();

      public static Rotation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Rotation(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:monkeyshines.World.Rotation)
    }

    public interface StringToGoodieTupleOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required string one = 1;
      /**
       * <code>required string one = 1;</code>
       */
      boolean hasOne();
      /**
       * <code>required string one = 1;</code>
       */
      java.lang.String getOne();
      /**
       * <code>required string one = 1;</code>
       */
      com.google.protobuf.ByteString
          getOneBytes();

      // required .monkeyshines.World.Goodie two = 2;
      /**
       * <code>required .monkeyshines.World.Goodie two = 2;</code>
       */
      boolean hasTwo();
      /**
       * <code>required .monkeyshines.World.Goodie two = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie getTwo();
      /**
       * <code>required .monkeyshines.World.Goodie two = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder getTwoOrBuilder();
    }
    /**
     * Protobuf type {@code monkeyshines.World.StringToGoodieTuple}
     */
    public static final class StringToGoodieTuple extends
        com.google.protobuf.GeneratedMessage
        implements StringToGoodieTupleOrBuilder {
      // Use StringToGoodieTuple.newBuilder() to construct.
      private StringToGoodieTuple(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private StringToGoodieTuple(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final StringToGoodieTuple defaultInstance;
      public static StringToGoodieTuple getDefaultInstance() {
        return defaultInstance;
      }

      public StringToGoodieTuple getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private StringToGoodieTuple(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                one_ = input.readBytes();
                break;
              }
              case 18: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = two_.toBuilder();
                }
                two_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(two_);
                  two_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_StringToGoodieTuple_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_StringToGoodieTuple_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder.class);
      }

      public static com.google.protobuf.Parser<StringToGoodieTuple> PARSER =
          new com.google.protobuf.AbstractParser<StringToGoodieTuple>() {
        public StringToGoodieTuple parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new StringToGoodieTuple(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<StringToGoodieTuple> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required string one = 1;
      public static final int ONE_FIELD_NUMBER = 1;
      private java.lang.Object one_;
      /**
       * <code>required string one = 1;</code>
       */
      public boolean hasOne() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string one = 1;</code>
       */
      public java.lang.String getOne() {
        java.lang.Object ref = one_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            one_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string one = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOneBytes() {
        java.lang.Object ref = one_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          one_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // required .monkeyshines.World.Goodie two = 2;
      public static final int TWO_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie two_;
      /**
       * <code>required .monkeyshines.World.Goodie two = 2;</code>
       */
      public boolean hasTwo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .monkeyshines.World.Goodie two = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie getTwo() {
        return two_;
      }
      /**
       * <code>required .monkeyshines.World.Goodie two = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder getTwoOrBuilder() {
        return two_;
      }

      private void initFields() {
        one_ = "";
        two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasOne()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasTwo()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getTwo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getOneBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, two_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getOneBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, two_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.StringToGoodieTuple}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_StringToGoodieTuple_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_StringToGoodieTuple_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getTwoFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          one_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          if (twoBuilder_ == null) {
            two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance();
          } else {
            twoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_StringToGoodieTuple_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.one_ = one_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (twoBuilder_ == null) {
            result.two_ = two_;
          } else {
            result.two_ = twoBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.getDefaultInstance()) return this;
          if (other.hasOne()) {
            bitField0_ |= 0x00000001;
            one_ = other.one_;
            onChanged();
          }
          if (other.hasTwo()) {
            mergeTwo(other.getTwo());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasOne()) {
            
            return false;
          }
          if (!hasTwo()) {
            
            return false;
          }
          if (!getTwo().isInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required string one = 1;
        private java.lang.Object one_ = "";
        /**
         * <code>required string one = 1;</code>
         */
        public boolean hasOne() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string one = 1;</code>
         */
        public java.lang.String getOne() {
          java.lang.Object ref = one_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            one_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string one = 1;</code>
         */
        public com.google.protobuf.ByteString
            getOneBytes() {
          java.lang.Object ref = one_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            one_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string one = 1;</code>
         */
        public Builder setOne(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          one_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string one = 1;</code>
         */
        public Builder clearOne() {
          bitField0_ = (bitField0_ & ~0x00000001);
          one_ = getDefaultInstance().getOne();
          onChanged();
          return this;
        }
        /**
         * <code>required string one = 1;</code>
         */
        public Builder setOneBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          one_ = value;
          onChanged();
          return this;
        }

        // required .monkeyshines.World.Goodie two = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder> twoBuilder_;
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public boolean hasTwo() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie getTwo() {
          if (twoBuilder_ == null) {
            return two_;
          } else {
            return twoBuilder_.getMessage();
          }
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public Builder setTwo(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie value) {
          if (twoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            two_ = value;
            onChanged();
          } else {
            twoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public Builder setTwo(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder builderForValue) {
          if (twoBuilder_ == null) {
            two_ = builderForValue.build();
            onChanged();
          } else {
            twoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public Builder mergeTwo(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie value) {
          if (twoBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                two_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance()) {
              two_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.newBuilder(two_).mergeFrom(value).buildPartial();
            } else {
              two_ = value;
            }
            onChanged();
          } else {
            twoBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public Builder clearTwo() {
          if (twoBuilder_ == null) {
            two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance();
            onChanged();
          } else {
            twoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder getTwoBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getTwoFieldBuilder().getBuilder();
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder getTwoOrBuilder() {
          if (twoBuilder_ != null) {
            return twoBuilder_.getMessageOrBuilder();
          } else {
            return two_;
          }
        }
        /**
         * <code>required .monkeyshines.World.Goodie two = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder> 
            getTwoFieldBuilder() {
          if (twoBuilder_ == null) {
            twoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder>(
                    two_,
                    getParentForChildren(),
                    isClean());
            two_ = null;
          }
          return twoBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.StringToGoodieTuple)
      }

      static {
        defaultInstance = new StringToGoodieTuple(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.StringToGoodieTuple)
    }

    public interface IntegerToLevelTupleOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 one = 1;
      /**
       * <code>required uint32 one = 1;</code>
       */
      boolean hasOne();
      /**
       * <code>required uint32 one = 1;</code>
       */
      int getOne();

      // required .monkeyshines.World.LevelScreen two = 2;
      /**
       * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
       */
      boolean hasTwo();
      /**
       * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen getTwo();
      /**
       * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder getTwoOrBuilder();
    }
    /**
     * Protobuf type {@code monkeyshines.World.IntegerToLevelTuple}
     */
    public static final class IntegerToLevelTuple extends
        com.google.protobuf.GeneratedMessage
        implements IntegerToLevelTupleOrBuilder {
      // Use IntegerToLevelTuple.newBuilder() to construct.
      private IntegerToLevelTuple(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private IntegerToLevelTuple(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final IntegerToLevelTuple defaultInstance;
      public static IntegerToLevelTuple getDefaultInstance() {
        return defaultInstance;
      }

      public IntegerToLevelTuple getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private IntegerToLevelTuple(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                one_ = input.readUInt32();
                break;
              }
              case 18: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = two_.toBuilder();
                }
                two_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(two_);
                  two_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_IntegerToLevelTuple_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_IntegerToLevelTuple_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder.class);
      }

      public static com.google.protobuf.Parser<IntegerToLevelTuple> PARSER =
          new com.google.protobuf.AbstractParser<IntegerToLevelTuple>() {
        public IntegerToLevelTuple parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new IntegerToLevelTuple(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<IntegerToLevelTuple> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 one = 1;
      public static final int ONE_FIELD_NUMBER = 1;
      private int one_;
      /**
       * <code>required uint32 one = 1;</code>
       */
      public boolean hasOne() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 one = 1;</code>
       */
      public int getOne() {
        return one_;
      }

      // required .monkeyshines.World.LevelScreen two = 2;
      public static final int TWO_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen two_;
      /**
       * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
       */
      public boolean hasTwo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen getTwo() {
        return two_;
      }
      /**
       * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder getTwoOrBuilder() {
        return two_;
      }

      private void initFields() {
        one_ = 0;
        two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasOne()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasTwo()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getTwo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, one_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, two_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, one_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, two_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.IntegerToLevelTuple}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_IntegerToLevelTuple_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_IntegerToLevelTuple_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getTwoFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          one_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (twoBuilder_ == null) {
            two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance();
          } else {
            twoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_IntegerToLevelTuple_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.one_ = one_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (twoBuilder_ == null) {
            result.two_ = two_;
          } else {
            result.two_ = twoBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.getDefaultInstance()) return this;
          if (other.hasOne()) {
            setOne(other.getOne());
          }
          if (other.hasTwo()) {
            mergeTwo(other.getTwo());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasOne()) {
            
            return false;
          }
          if (!hasTwo()) {
            
            return false;
          }
          if (!getTwo().isInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 one = 1;
        private int one_ ;
        /**
         * <code>required uint32 one = 1;</code>
         */
        public boolean hasOne() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 one = 1;</code>
         */
        public int getOne() {
          return one_;
        }
        /**
         * <code>required uint32 one = 1;</code>
         */
        public Builder setOne(int value) {
          bitField0_ |= 0x00000001;
          one_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 one = 1;</code>
         */
        public Builder clearOne() {
          bitField0_ = (bitField0_ & ~0x00000001);
          one_ = 0;
          onChanged();
          return this;
        }

        // required .monkeyshines.World.LevelScreen two = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder> twoBuilder_;
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public boolean hasTwo() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen getTwo() {
          if (twoBuilder_ == null) {
            return two_;
          } else {
            return twoBuilder_.getMessage();
          }
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public Builder setTwo(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen value) {
          if (twoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            two_ = value;
            onChanged();
          } else {
            twoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public Builder setTwo(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder builderForValue) {
          if (twoBuilder_ == null) {
            two_ = builderForValue.build();
            onChanged();
          } else {
            twoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public Builder mergeTwo(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen value) {
          if (twoBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                two_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance()) {
              two_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.newBuilder(two_).mergeFrom(value).buildPartial();
            } else {
              two_ = value;
            }
            onChanged();
          } else {
            twoBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public Builder clearTwo() {
          if (twoBuilder_ == null) {
            two_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance();
            onChanged();
          } else {
            twoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder getTwoBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getTwoFieldBuilder().getBuilder();
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder getTwoOrBuilder() {
          if (twoBuilder_ != null) {
            return twoBuilder_.getMessageOrBuilder();
          } else {
            return two_;
          }
        }
        /**
         * <code>required .monkeyshines.World.LevelScreen two = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder> 
            getTwoFieldBuilder() {
          if (twoBuilder_ == null) {
            twoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder>(
                    two_,
                    getParentForChildren(),
                    isClean());
            two_ = null;
          }
          return twoBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.IntegerToLevelTuple)
      }

      static {
        defaultInstance = new IntegerToLevelTuple(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.IntegerToLevelTuple)
    }

    public interface PointOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required int32 x = 1;
      /**
       * <code>required int32 x = 1;</code>
       */
      boolean hasX();
      /**
       * <code>required int32 x = 1;</code>
       */
      int getX();

      // required int32 y = 2;
      /**
       * <code>required int32 y = 2;</code>
       */
      boolean hasY();
      /**
       * <code>required int32 y = 2;</code>
       */
      int getY();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Point}
     */
    public static final class Point extends
        com.google.protobuf.GeneratedMessage
        implements PointOrBuilder {
      // Use Point.newBuilder() to construct.
      private Point(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Point(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Point defaultInstance;
      public static Point getDefaultInstance() {
        return defaultInstance;
      }

      public Point getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Point(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                x_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                y_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Point_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Point_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder.class);
      }

      public static com.google.protobuf.Parser<Point> PARSER =
          new com.google.protobuf.AbstractParser<Point>() {
        public Point parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Point(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Point> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required int32 x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private int x_;
      /**
       * <code>required int32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }

      // required int32 y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private int y_;
      /**
       * <code>required int32 y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }

      private void initFields() {
        x_ = 0;
        y_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasX()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasY()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, x_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, y_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, x_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, y_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Point}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Point_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Point_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          x_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          y_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Point_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.x_ = x_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.y_ = y_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasX()) {
            
            return false;
          }
          if (!hasY()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required int32 x = 1;
        private int x_ ;
        /**
         * <code>required int32 x = 1;</code>
         */
        public boolean hasX() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int32 x = 1;</code>
         */
        public int getX() {
          return x_;
        }
        /**
         * <code>required int32 x = 1;</code>
         */
        public Builder setX(int value) {
          bitField0_ |= 0x00000001;
          x_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 x = 1;</code>
         */
        public Builder clearX() {
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = 0;
          onChanged();
          return this;
        }

        // required int32 y = 2;
        private int y_ ;
        /**
         * <code>required int32 y = 2;</code>
         */
        public boolean hasY() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required int32 y = 2;</code>
         */
        public int getY() {
          return y_;
        }
        /**
         * <code>required int32 y = 2;</code>
         */
        public Builder setY(int value) {
          bitField0_ |= 0x00000002;
          y_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 y = 2;</code>
         */
        public Builder clearY() {
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Point)
      }

      static {
        defaultInstance = new Point(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Point)
    }

    public interface BoxOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required .monkeyshines.World.Point topLeft = 1;
      /**
       * <code>required .monkeyshines.World.Point topLeft = 1;</code>
       */
      boolean hasTopLeft();
      /**
       * <code>required .monkeyshines.World.Point topLeft = 1;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getTopLeft();
      /**
       * <code>required .monkeyshines.World.Point topLeft = 1;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getTopLeftOrBuilder();

      // required .monkeyshines.World.Point size = 2;
      /**
       * <code>required .monkeyshines.World.Point size = 2;</code>
       */
      boolean hasSize();
      /**
       * <code>required .monkeyshines.World.Point size = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getSize();
      /**
       * <code>required .monkeyshines.World.Point size = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getSizeOrBuilder();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Box}
     */
    public static final class Box extends
        com.google.protobuf.GeneratedMessage
        implements BoxOrBuilder {
      // Use Box.newBuilder() to construct.
      private Box(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Box(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Box defaultInstance;
      public static Box getDefaultInstance() {
        return defaultInstance;
      }

      public Box getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Box(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = topLeft_.toBuilder();
                }
                topLeft_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(topLeft_);
                  topLeft_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = size_.toBuilder();
                }
                size_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(size_);
                  size_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Box_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Box_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder.class);
      }

      public static com.google.protobuf.Parser<Box> PARSER =
          new com.google.protobuf.AbstractParser<Box>() {
        public Box parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Box(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Box> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required .monkeyshines.World.Point topLeft = 1;
      public static final int TOPLEFT_FIELD_NUMBER = 1;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point topLeft_;
      /**
       * <code>required .monkeyshines.World.Point topLeft = 1;</code>
       */
      public boolean hasTopLeft() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .monkeyshines.World.Point topLeft = 1;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getTopLeft() {
        return topLeft_;
      }
      /**
       * <code>required .monkeyshines.World.Point topLeft = 1;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getTopLeftOrBuilder() {
        return topLeft_;
      }

      // required .monkeyshines.World.Point size = 2;
      public static final int SIZE_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point size_;
      /**
       * <code>required .monkeyshines.World.Point size = 2;</code>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .monkeyshines.World.Point size = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getSize() {
        return size_;
      }
      /**
       * <code>required .monkeyshines.World.Point size = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getSizeOrBuilder() {
        return size_;
      }

      private void initFields() {
        topLeft_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        size_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasTopLeft()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasSize()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getTopLeft().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!getSize().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, topLeft_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, size_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, topLeft_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, size_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Box}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Box_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Box_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getTopLeftFieldBuilder();
            getSizeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (topLeftBuilder_ == null) {
            topLeft_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            topLeftBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (sizeBuilder_ == null) {
            size_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            sizeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Box_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (topLeftBuilder_ == null) {
            result.topLeft_ = topLeft_;
          } else {
            result.topLeft_ = topLeftBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (sizeBuilder_ == null) {
            result.size_ = size_;
          } else {
            result.size_ = sizeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance()) return this;
          if (other.hasTopLeft()) {
            mergeTopLeft(other.getTopLeft());
          }
          if (other.hasSize()) {
            mergeSize(other.getSize());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasTopLeft()) {
            
            return false;
          }
          if (!hasSize()) {
            
            return false;
          }
          if (!getTopLeft().isInitialized()) {
            
            return false;
          }
          if (!getSize().isInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required .monkeyshines.World.Point topLeft = 1;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point topLeft_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> topLeftBuilder_;
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public boolean hasTopLeft() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getTopLeft() {
          if (topLeftBuilder_ == null) {
            return topLeft_;
          } else {
            return topLeftBuilder_.getMessage();
          }
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public Builder setTopLeft(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (topLeftBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            topLeft_ = value;
            onChanged();
          } else {
            topLeftBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public Builder setTopLeft(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (topLeftBuilder_ == null) {
            topLeft_ = builderForValue.build();
            onChanged();
          } else {
            topLeftBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public Builder mergeTopLeft(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (topLeftBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                topLeft_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              topLeft_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(topLeft_).mergeFrom(value).buildPartial();
            } else {
              topLeft_ = value;
            }
            onChanged();
          } else {
            topLeftBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public Builder clearTopLeft() {
          if (topLeftBuilder_ == null) {
            topLeft_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            topLeftBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getTopLeftBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getTopLeftFieldBuilder().getBuilder();
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getTopLeftOrBuilder() {
          if (topLeftBuilder_ != null) {
            return topLeftBuilder_.getMessageOrBuilder();
          } else {
            return topLeft_;
          }
        }
        /**
         * <code>required .monkeyshines.World.Point topLeft = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getTopLeftFieldBuilder() {
          if (topLeftBuilder_ == null) {
            topLeftBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    topLeft_,
                    getParentForChildren(),
                    isClean());
            topLeft_ = null;
          }
          return topLeftBuilder_;
        }

        // required .monkeyshines.World.Point size = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point size_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> sizeBuilder_;
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public boolean hasSize() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getSize() {
          if (sizeBuilder_ == null) {
            return size_;
          } else {
            return sizeBuilder_.getMessage();
          }
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public Builder setSize(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (sizeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            size_ = value;
            onChanged();
          } else {
            sizeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public Builder setSize(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (sizeBuilder_ == null) {
            size_ = builderForValue.build();
            onChanged();
          } else {
            sizeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public Builder mergeSize(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (sizeBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                size_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              size_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(size_).mergeFrom(value).buildPartial();
            } else {
              size_ = value;
            }
            onChanged();
          } else {
            sizeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public Builder clearSize() {
          if (sizeBuilder_ == null) {
            size_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            sizeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getSizeBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getSizeFieldBuilder().getBuilder();
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getSizeOrBuilder() {
          if (sizeBuilder_ != null) {
            return sizeBuilder_.getMessageOrBuilder();
          } else {
            return size_;
          }
        }
        /**
         * <code>required .monkeyshines.World.Point size = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getSizeFieldBuilder() {
          if (sizeBuilder_ == null) {
            sizeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    size_,
                    getParentForChildren(),
                    isClean());
            size_ = null;
          }
          return sizeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Box)
      }

      static {
        defaultInstance = new Box(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Box)
    }

    public interface GoodieOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * Rare case where id refers to graphic AND type, since types
       * are hardcoded.
       * </pre>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * Rare case where id refers to graphic AND type, since types
       * are hardcoded.
       * </pre>
       */
      int getId();

      // optional uint32 screen_id = 2;
      /**
       * <code>optional uint32 screen_id = 2;</code>
       */
      boolean hasScreenId();
      /**
       * <code>optional uint32 screen_id = 2;</code>
       */
      int getScreenId();

      // optional .monkeyshines.World.Point location = 3;
      /**
       * <code>optional .monkeyshines.World.Point location = 3;</code>
       */
      boolean hasLocation();
      /**
       * <code>optional .monkeyshines.World.Point location = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getLocation();
      /**
       * <code>optional .monkeyshines.World.Point location = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getLocationOrBuilder();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Goodie}
     */
    public static final class Goodie extends
        com.google.protobuf.GeneratedMessage
        implements GoodieOrBuilder {
      // Use Goodie.newBuilder() to construct.
      private Goodie(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Goodie(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Goodie defaultInstance;
      public static Goodie getDefaultInstance() {
        return defaultInstance;
      }

      public Goodie getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Goodie(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                screenId_ = input.readUInt32();
                break;
              }
              case 26: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = location_.toBuilder();
                }
                location_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(location_);
                  location_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Goodie_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Goodie_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder.class);
      }

      public static com.google.protobuf.Parser<Goodie> PARSER =
          new com.google.protobuf.AbstractParser<Goodie>() {
        public Goodie parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Goodie(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Goodie> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * Rare case where id refers to graphic AND type, since types
       * are hardcoded.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * Rare case where id refers to graphic AND type, since types
       * are hardcoded.
       * </pre>
       */
      public int getId() {
        return id_;
      }

      // optional uint32 screen_id = 2;
      public static final int SCREEN_ID_FIELD_NUMBER = 2;
      private int screenId_;
      /**
       * <code>optional uint32 screen_id = 2;</code>
       */
      public boolean hasScreenId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 screen_id = 2;</code>
       */
      public int getScreenId() {
        return screenId_;
      }

      // optional .monkeyshines.World.Point location = 3;
      public static final int LOCATION_FIELD_NUMBER = 3;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point location_;
      /**
       * <code>optional .monkeyshines.World.Point location = 3;</code>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .monkeyshines.World.Point location = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getLocation() {
        return location_;
      }
      /**
       * <code>optional .monkeyshines.World.Point location = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getLocationOrBuilder() {
        return location_;
      }

      private void initFields() {
        id_ = 0;
        screenId_ = 0;
        location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, screenId_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, location_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, screenId_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, location_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Goodie}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.GoodieOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Goodie_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Goodie_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getLocationFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          screenId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          if (locationBuilder_ == null) {
            location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            locationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Goodie_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.screenId_ = screenId_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (locationBuilder_ == null) {
            result.location_ = location_;
          } else {
            result.location_ = locationBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasScreenId()) {
            setScreenId(other.getScreenId());
          }
          if (other.hasLocation()) {
            mergeLocation(other.getLocation());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasLocation()) {
            if (!getLocation().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Goodie) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * Rare case where id refers to graphic AND type, since types
         * are hardcoded.
         * </pre>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * Rare case where id refers to graphic AND type, since types
         * are hardcoded.
         * </pre>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * Rare case where id refers to graphic AND type, since types
         * are hardcoded.
         * </pre>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * Rare case where id refers to graphic AND type, since types
         * are hardcoded.
         * </pre>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 screen_id = 2;
        private int screenId_ ;
        /**
         * <code>optional uint32 screen_id = 2;</code>
         */
        public boolean hasScreenId() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 screen_id = 2;</code>
         */
        public int getScreenId() {
          return screenId_;
        }
        /**
         * <code>optional uint32 screen_id = 2;</code>
         */
        public Builder setScreenId(int value) {
          bitField0_ |= 0x00000002;
          screenId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 screen_id = 2;</code>
         */
        public Builder clearScreenId() {
          bitField0_ = (bitField0_ & ~0x00000002);
          screenId_ = 0;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.Point location = 3;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> locationBuilder_;
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public boolean hasLocation() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getLocation() {
          if (locationBuilder_ == null) {
            return location_;
          } else {
            return locationBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public Builder setLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (locationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            location_ = value;
            onChanged();
          } else {
            locationBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public Builder setLocation(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (locationBuilder_ == null) {
            location_ = builderForValue.build();
            onChanged();
          } else {
            locationBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public Builder mergeLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (locationBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                location_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              location_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(location_).mergeFrom(value).buildPartial();
            } else {
              location_ = value;
            }
            onChanged();
          } else {
            locationBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public Builder clearLocation() {
          if (locationBuilder_ == null) {
            location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            locationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getLocationBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getLocationFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getLocationOrBuilder() {
          if (locationBuilder_ != null) {
            return locationBuilder_.getMessageOrBuilder();
          } else {
            return location_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getLocationFieldBuilder() {
          if (locationBuilder_ == null) {
            locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    location_,
                    getParentForChildren(),
                    isClean());
            location_ = null;
          }
          return locationBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Goodie)
      }

      static {
        defaultInstance = new Goodie(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Goodie)
    }

    public interface HazardOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       */
      int getId();

      // optional bool explodes = 2;
      /**
       * <code>optional bool explodes = 2;</code>
       */
      boolean hasExplodes();
      /**
       * <code>optional bool explodes = 2;</code>
       */
      boolean getExplodes();

      // optional .monkeyshines.World.DeathAnimation death_animation = 3;
      /**
       * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
       */
      boolean hasDeathAnimation();
      /**
       * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation getDeathAnimation();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Hazard}
     *
     * <pre>
     * These are the global definitions of the types of hazards, not the actual tiles
     * containing hazards defined later.
     * </pre>
     */
    public static final class Hazard extends
        com.google.protobuf.GeneratedMessage
        implements HazardOrBuilder {
      // Use Hazard.newBuilder() to construct.
      private Hazard(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Hazard(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Hazard defaultInstance;
      public static Hazard getDefaultInstance() {
        return defaultInstance;
      }

      public Hazard getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Hazard(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                explodes_ = input.readBool();
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  deathAnimation_ = value;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Hazard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Hazard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder.class);
      }

      public static com.google.protobuf.Parser<Hazard> PARSER =
          new com.google.protobuf.AbstractParser<Hazard>() {
        public Hazard parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Hazard(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Hazard> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      // optional bool explodes = 2;
      public static final int EXPLODES_FIELD_NUMBER = 2;
      private boolean explodes_;
      /**
       * <code>optional bool explodes = 2;</code>
       */
      public boolean hasExplodes() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool explodes = 2;</code>
       */
      public boolean getExplodes() {
        return explodes_;
      }

      // optional .monkeyshines.World.DeathAnimation death_animation = 3;
      public static final int DEATH_ANIMATION_FIELD_NUMBER = 3;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation deathAnimation_;
      /**
       * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
       */
      public boolean hasDeathAnimation() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation getDeathAnimation() {
        return deathAnimation_;
      }

      private void initFields() {
        id_ = 0;
        explodes_ = false;
        deathAnimation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation.NORMAL_DEATH;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBool(2, explodes_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeEnum(3, deathAnimation_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, explodes_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, deathAnimation_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Hazard}
       *
       * <pre>
       * These are the global definitions of the types of hazards, not the actual tiles
       * containing hazards defined later.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Hazard_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Hazard_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          explodes_ = false;
          bitField0_ = (bitField0_ & ~0x00000002);
          deathAnimation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation.NORMAL_DEATH;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Hazard_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.explodes_ = explodes_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.deathAnimation_ = deathAnimation_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasExplodes()) {
            setExplodes(other.getExplodes());
          }
          if (other.hasDeathAnimation()) {
            setDeathAnimation(other.getDeathAnimation());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // optional bool explodes = 2;
        private boolean explodes_ ;
        /**
         * <code>optional bool explodes = 2;</code>
         */
        public boolean hasExplodes() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional bool explodes = 2;</code>
         */
        public boolean getExplodes() {
          return explodes_;
        }
        /**
         * <code>optional bool explodes = 2;</code>
         */
        public Builder setExplodes(boolean value) {
          bitField0_ |= 0x00000002;
          explodes_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool explodes = 2;</code>
         */
        public Builder clearExplodes() {
          bitField0_ = (bitField0_ & ~0x00000002);
          explodes_ = false;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.DeathAnimation death_animation = 3;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation deathAnimation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation.NORMAL_DEATH;
        /**
         * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
         */
        public boolean hasDeathAnimation() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation getDeathAnimation() {
          return deathAnimation_;
        }
        /**
         * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
         */
        public Builder setDeathAnimation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000004;
          deathAnimation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.DeathAnimation death_animation = 3;</code>
         */
        public Builder clearDeathAnimation() {
          bitField0_ = (bitField0_ & ~0x00000004);
          deathAnimation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.DeathAnimation.NORMAL_DEATH;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Hazard)
      }

      static {
        defaultInstance = new Hazard(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Hazard)
    }

    public interface LevelScreenOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       */
      int getId();

      // optional .monkeyshines.World.Background background = 2;
      /**
       * <code>optional .monkeyshines.World.Background background = 2;</code>
       */
      boolean hasBackground();
      /**
       * <code>optional .monkeyshines.World.Background background = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background getBackground();
      /**
       * <code>optional .monkeyshines.World.Background background = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder getBackgroundOrBuilder();

      // optional .monkeyshines.World.Point bonzo_location = 3;
      /**
       * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
       */
      boolean hasBonzoLocation();
      /**
       * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getBonzoLocation();
      /**
       * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getBonzoLocationOrBuilder();

      // repeated .monkeyshines.World.Sprite sprites = 4;
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite> 
          getSpritesList();
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite getSprites(int index);
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      int getSpritesCount();
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder> 
          getSpritesOrBuilderList();
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder getSpritesOrBuilder(
          int index);

      // repeated .monkeyshines.World.Tile tiles = 5;
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile> 
          getTilesList();
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile getTiles(int index);
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      int getTilesCount();
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder> 
          getTilesOrBuilderList();
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder getTilesOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code monkeyshines.World.LevelScreen}
     *
     * <pre>
     * Possibly the most complicated structure, as this contains all the information on a single screen
     * not global to the world. This includes sprite, tile, background data as well as start location.
     * </pre>
     */
    public static final class LevelScreen extends
        com.google.protobuf.GeneratedMessage
        implements LevelScreenOrBuilder {
      // Use LevelScreen.newBuilder() to construct.
      private LevelScreen(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private LevelScreen(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final LevelScreen defaultInstance;
      public static LevelScreen getDefaultInstance() {
        return defaultInstance;
      }

      public LevelScreen getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private LevelScreen(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 18: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = background_.toBuilder();
                }
                background_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(background_);
                  background_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = bonzoLocation_.toBuilder();
                }
                bonzoLocation_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(bonzoLocation_);
                  bonzoLocation_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  sprites_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite>();
                  mutable_bitField0_ |= 0x00000008;
                }
                sprites_.add(input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.PARSER, extensionRegistry));
                break;
              }
              case 42: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  tiles_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile>();
                  mutable_bitField0_ |= 0x00000010;
                }
                tiles_.add(input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.PARSER, extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            sprites_ = java.util.Collections.unmodifiableList(sprites_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            tiles_ = java.util.Collections.unmodifiableList(tiles_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_LevelScreen_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_LevelScreen_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder.class);
      }

      public static com.google.protobuf.Parser<LevelScreen> PARSER =
          new com.google.protobuf.AbstractParser<LevelScreen>() {
        public LevelScreen parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new LevelScreen(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<LevelScreen> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      // optional .monkeyshines.World.Background background = 2;
      public static final int BACKGROUND_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background background_;
      /**
       * <code>optional .monkeyshines.World.Background background = 2;</code>
       */
      public boolean hasBackground() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .monkeyshines.World.Background background = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background getBackground() {
        return background_;
      }
      /**
       * <code>optional .monkeyshines.World.Background background = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder getBackgroundOrBuilder() {
        return background_;
      }

      // optional .monkeyshines.World.Point bonzo_location = 3;
      public static final int BONZO_LOCATION_FIELD_NUMBER = 3;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point bonzoLocation_;
      /**
       * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
       */
      public boolean hasBonzoLocation() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getBonzoLocation() {
        return bonzoLocation_;
      }
      /**
       * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getBonzoLocationOrBuilder() {
        return bonzoLocation_;
      }

      // repeated .monkeyshines.World.Sprite sprites = 4;
      public static final int SPRITES_FIELD_NUMBER = 4;
      private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite> sprites_;
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite> getSpritesList() {
        return sprites_;
      }
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder> 
          getSpritesOrBuilderList() {
        return sprites_;
      }
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      public int getSpritesCount() {
        return sprites_.size();
      }
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite getSprites(int index) {
        return sprites_.get(index);
      }
      /**
       * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder getSpritesOrBuilder(
          int index) {
        return sprites_.get(index);
      }

      // repeated .monkeyshines.World.Tile tiles = 5;
      public static final int TILES_FIELD_NUMBER = 5;
      private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile> tiles_;
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile> getTilesList() {
        return tiles_;
      }
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder> 
          getTilesOrBuilderList() {
        return tiles_;
      }
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
       *
       * <pre>
       * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
       * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
       * isn't too difficult.
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder getTilesOrBuilder(
          int index) {
        return tiles_.get(index);
      }

      private void initFields() {
        id_ = 0;
        background_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance();
        bonzoLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        sprites_ = java.util.Collections.emptyList();
        tiles_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasBonzoLocation()) {
          if (!getBonzoLocation().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getSpritesCount(); i++) {
          if (!getSprites(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getTilesCount(); i++) {
          if (!getTiles(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, background_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, bonzoLocation_);
        }
        for (int i = 0; i < sprites_.size(); i++) {
          output.writeMessage(4, sprites_.get(i));
        }
        for (int i = 0; i < tiles_.size(); i++) {
          output.writeMessage(5, tiles_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, background_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, bonzoLocation_);
        }
        for (int i = 0; i < sprites_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, sprites_.get(i));
        }
        for (int i = 0; i < tiles_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, tiles_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.LevelScreen}
       *
       * <pre>
       * Possibly the most complicated structure, as this contains all the information on a single screen
       * not global to the world. This includes sprite, tile, background data as well as start location.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreenOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_LevelScreen_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_LevelScreen_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getBackgroundFieldBuilder();
            getBonzoLocationFieldBuilder();
            getSpritesFieldBuilder();
            getTilesFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (backgroundBuilder_ == null) {
            background_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance();
          } else {
            backgroundBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (bonzoLocationBuilder_ == null) {
            bonzoLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            bonzoLocationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (spritesBuilder_ == null) {
            sprites_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            spritesBuilder_.clear();
          }
          if (tilesBuilder_ == null) {
            tiles_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            tilesBuilder_.clear();
          }
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_LevelScreen_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (backgroundBuilder_ == null) {
            result.background_ = background_;
          } else {
            result.background_ = backgroundBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (bonzoLocationBuilder_ == null) {
            result.bonzoLocation_ = bonzoLocation_;
          } else {
            result.bonzoLocation_ = bonzoLocationBuilder_.build();
          }
          if (spritesBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              sprites_ = java.util.Collections.unmodifiableList(sprites_);
              bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.sprites_ = sprites_;
          } else {
            result.sprites_ = spritesBuilder_.build();
          }
          if (tilesBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
              tiles_ = java.util.Collections.unmodifiableList(tiles_);
              bitField0_ = (bitField0_ & ~0x00000010);
            }
            result.tiles_ = tiles_;
          } else {
            result.tiles_ = tilesBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasBackground()) {
            mergeBackground(other.getBackground());
          }
          if (other.hasBonzoLocation()) {
            mergeBonzoLocation(other.getBonzoLocation());
          }
          if (spritesBuilder_ == null) {
            if (!other.sprites_.isEmpty()) {
              if (sprites_.isEmpty()) {
                sprites_ = other.sprites_;
                bitField0_ = (bitField0_ & ~0x00000008);
              } else {
                ensureSpritesIsMutable();
                sprites_.addAll(other.sprites_);
              }
              onChanged();
            }
          } else {
            if (!other.sprites_.isEmpty()) {
              if (spritesBuilder_.isEmpty()) {
                spritesBuilder_.dispose();
                spritesBuilder_ = null;
                sprites_ = other.sprites_;
                bitField0_ = (bitField0_ & ~0x00000008);
                spritesBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getSpritesFieldBuilder() : null;
              } else {
                spritesBuilder_.addAllMessages(other.sprites_);
              }
            }
          }
          if (tilesBuilder_ == null) {
            if (!other.tiles_.isEmpty()) {
              if (tiles_.isEmpty()) {
                tiles_ = other.tiles_;
                bitField0_ = (bitField0_ & ~0x00000010);
              } else {
                ensureTilesIsMutable();
                tiles_.addAll(other.tiles_);
              }
              onChanged();
            }
          } else {
            if (!other.tiles_.isEmpty()) {
              if (tilesBuilder_.isEmpty()) {
                tilesBuilder_.dispose();
                tilesBuilder_ = null;
                tiles_ = other.tiles_;
                bitField0_ = (bitField0_ & ~0x00000010);
                tilesBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getTilesFieldBuilder() : null;
              } else {
                tilesBuilder_.addAllMessages(other.tiles_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasBonzoLocation()) {
            if (!getBonzoLocation().isInitialized()) {
              
              return false;
            }
          }
          for (int i = 0; i < getSpritesCount(); i++) {
            if (!getSprites(i).isInitialized()) {
              
              return false;
            }
          }
          for (int i = 0; i < getTilesCount(); i++) {
            if (!getTiles(i).isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.LevelScreen) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.Background background = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background background_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder> backgroundBuilder_;
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public boolean hasBackground() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background getBackground() {
          if (backgroundBuilder_ == null) {
            return background_;
          } else {
            return backgroundBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public Builder setBackground(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background value) {
          if (backgroundBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            background_ = value;
            onChanged();
          } else {
            backgroundBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public Builder setBackground(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder builderForValue) {
          if (backgroundBuilder_ == null) {
            background_ = builderForValue.build();
            onChanged();
          } else {
            backgroundBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public Builder mergeBackground(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background value) {
          if (backgroundBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                background_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance()) {
              background_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.newBuilder(background_).mergeFrom(value).buildPartial();
            } else {
              background_ = value;
            }
            onChanged();
          } else {
            backgroundBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public Builder clearBackground() {
          if (backgroundBuilder_ == null) {
            background_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance();
            onChanged();
          } else {
            backgroundBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder getBackgroundBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getBackgroundFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder getBackgroundOrBuilder() {
          if (backgroundBuilder_ != null) {
            return backgroundBuilder_.getMessageOrBuilder();
          } else {
            return background_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Background background = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder> 
            getBackgroundFieldBuilder() {
          if (backgroundBuilder_ == null) {
            backgroundBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder>(
                    background_,
                    getParentForChildren(),
                    isClean());
            background_ = null;
          }
          return backgroundBuilder_;
        }

        // optional .monkeyshines.World.Point bonzo_location = 3;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point bonzoLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> bonzoLocationBuilder_;
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public boolean hasBonzoLocation() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getBonzoLocation() {
          if (bonzoLocationBuilder_ == null) {
            return bonzoLocation_;
          } else {
            return bonzoLocationBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public Builder setBonzoLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (bonzoLocationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            bonzoLocation_ = value;
            onChanged();
          } else {
            bonzoLocationBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public Builder setBonzoLocation(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (bonzoLocationBuilder_ == null) {
            bonzoLocation_ = builderForValue.build();
            onChanged();
          } else {
            bonzoLocationBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public Builder mergeBonzoLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (bonzoLocationBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                bonzoLocation_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              bonzoLocation_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(bonzoLocation_).mergeFrom(value).buildPartial();
            } else {
              bonzoLocation_ = value;
            }
            onChanged();
          } else {
            bonzoLocationBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public Builder clearBonzoLocation() {
          if (bonzoLocationBuilder_ == null) {
            bonzoLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            bonzoLocationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getBonzoLocationBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getBonzoLocationFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getBonzoLocationOrBuilder() {
          if (bonzoLocationBuilder_ != null) {
            return bonzoLocationBuilder_.getMessageOrBuilder();
          } else {
            return bonzoLocation_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point bonzo_location = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getBonzoLocationFieldBuilder() {
          if (bonzoLocationBuilder_ == null) {
            bonzoLocationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    bonzoLocation_,
                    getParentForChildren(),
                    isClean());
            bonzoLocation_ = null;
          }
          return bonzoLocationBuilder_;
        }

        // repeated .monkeyshines.World.Sprite sprites = 4;
        private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite> sprites_ =
          java.util.Collections.emptyList();
        private void ensureSpritesIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            sprites_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite>(sprites_);
            bitField0_ |= 0x00000008;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder> spritesBuilder_;

        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite> getSpritesList() {
          if (spritesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(sprites_);
          } else {
            return spritesBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public int getSpritesCount() {
          if (spritesBuilder_ == null) {
            return sprites_.size();
          } else {
            return spritesBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite getSprites(int index) {
          if (spritesBuilder_ == null) {
            return sprites_.get(index);
          } else {
            return spritesBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder setSprites(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite value) {
          if (spritesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSpritesIsMutable();
            sprites_.set(index, value);
            onChanged();
          } else {
            spritesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder setSprites(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder builderForValue) {
          if (spritesBuilder_ == null) {
            ensureSpritesIsMutable();
            sprites_.set(index, builderForValue.build());
            onChanged();
          } else {
            spritesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder addSprites(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite value) {
          if (spritesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSpritesIsMutable();
            sprites_.add(value);
            onChanged();
          } else {
            spritesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder addSprites(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite value) {
          if (spritesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSpritesIsMutable();
            sprites_.add(index, value);
            onChanged();
          } else {
            spritesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder addSprites(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder builderForValue) {
          if (spritesBuilder_ == null) {
            ensureSpritesIsMutable();
            sprites_.add(builderForValue.build());
            onChanged();
          } else {
            spritesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder addSprites(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder builderForValue) {
          if (spritesBuilder_ == null) {
            ensureSpritesIsMutable();
            sprites_.add(index, builderForValue.build());
            onChanged();
          } else {
            spritesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder addAllSprites(
            java.lang.Iterable<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite> values) {
          if (spritesBuilder_ == null) {
            ensureSpritesIsMutable();
            super.addAll(values, sprites_);
            onChanged();
          } else {
            spritesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder clearSprites() {
          if (spritesBuilder_ == null) {
            sprites_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
          } else {
            spritesBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public Builder removeSprites(int index) {
          if (spritesBuilder_ == null) {
            ensureSpritesIsMutable();
            sprites_.remove(index);
            onChanged();
          } else {
            spritesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder getSpritesBuilder(
            int index) {
          return getSpritesFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder getSpritesOrBuilder(
            int index) {
          if (spritesBuilder_ == null) {
            return sprites_.get(index);  } else {
            return spritesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder> 
             getSpritesOrBuilderList() {
          if (spritesBuilder_ != null) {
            return spritesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(sprites_);
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder addSpritesBuilder() {
          return getSpritesFieldBuilder().addBuilder(
              org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.getDefaultInstance());
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder addSpritesBuilder(
            int index) {
          return getSpritesFieldBuilder().addBuilder(
              index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.getDefaultInstance());
        }
        /**
         * <code>repeated .monkeyshines.World.Sprite sprites = 4;</code>
         */
        public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder> 
             getSpritesBuilderList() {
          return getSpritesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder> 
            getSpritesFieldBuilder() {
          if (spritesBuilder_ == null) {
            spritesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder>(
                    sprites_,
                    ((bitField0_ & 0x00000008) == 0x00000008),
                    getParentForChildren(),
                    isClean());
            sprites_ = null;
          }
          return spritesBuilder_;
        }

        // repeated .monkeyshines.World.Tile tiles = 5;
        private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile> tiles_ =
          java.util.Collections.emptyList();
        private void ensureTilesIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            tiles_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile>(tiles_);
            bitField0_ |= 0x00000010;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder> tilesBuilder_;

        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile> getTilesList() {
          if (tilesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(tiles_);
          } else {
            return tilesBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public int getTilesCount() {
          if (tilesBuilder_ == null) {
            return tiles_.size();
          } else {
            return tilesBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile getTiles(int index) {
          if (tilesBuilder_ == null) {
            return tiles_.get(index);
          } else {
            return tilesBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder setTiles(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile value) {
          if (tilesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTilesIsMutable();
            tiles_.set(index, value);
            onChanged();
          } else {
            tilesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder setTiles(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder builderForValue) {
          if (tilesBuilder_ == null) {
            ensureTilesIsMutable();
            tiles_.set(index, builderForValue.build());
            onChanged();
          } else {
            tilesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder addTiles(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile value) {
          if (tilesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTilesIsMutable();
            tiles_.add(value);
            onChanged();
          } else {
            tilesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder addTiles(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile value) {
          if (tilesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTilesIsMutable();
            tiles_.add(index, value);
            onChanged();
          } else {
            tilesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder addTiles(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder builderForValue) {
          if (tilesBuilder_ == null) {
            ensureTilesIsMutable();
            tiles_.add(builderForValue.build());
            onChanged();
          } else {
            tilesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder addTiles(
            int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder builderForValue) {
          if (tilesBuilder_ == null) {
            ensureTilesIsMutable();
            tiles_.add(index, builderForValue.build());
            onChanged();
          } else {
            tilesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder addAllTiles(
            java.lang.Iterable<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile> values) {
          if (tilesBuilder_ == null) {
            ensureTilesIsMutable();
            super.addAll(values, tiles_);
            onChanged();
          } else {
            tilesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder clearTiles() {
          if (tilesBuilder_ == null) {
            tiles_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            onChanged();
          } else {
            tilesBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public Builder removeTiles(int index) {
          if (tilesBuilder_ == null) {
            ensureTilesIsMutable();
            tiles_.remove(index);
            onChanged();
          } else {
            tilesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder getTilesBuilder(
            int index) {
          return getTilesFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder getTilesOrBuilder(
            int index) {
          if (tilesBuilder_ == null) {
            return tiles_.get(index);  } else {
            return tilesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder> 
             getTilesOrBuilderList() {
          if (tilesBuilder_ != null) {
            return tilesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(tiles_);
          }
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder addTilesBuilder() {
          return getTilesFieldBuilder().addBuilder(
              org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.getDefaultInstance());
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder addTilesBuilder(
            int index) {
          return getTilesFieldBuilder().addBuilder(
              index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.getDefaultInstance());
        }
        /**
         * <code>repeated .monkeyshines.World.Tile tiles = 5;</code>
         *
         * <pre>
         * This is a 2D array in memory. It is cut down to a 1D array of nxm elements
         * and turned back into a 2D array. Since the sizes are hardcoded and fixed, this
         * isn't too difficult.
         * </pre>
         */
        public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder> 
             getTilesBuilderList() {
          return getTilesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder> 
            getTilesFieldBuilder() {
          if (tilesBuilder_ == null) {
            tilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder>(
                    tiles_,
                    ((bitField0_ & 0x00000010) == 0x00000010),
                    getParentForChildren(),
                    isClean());
            tiles_ = null;
          }
          return tilesBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.LevelScreen)
      }

      static {
        defaultInstance = new LevelScreen(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.LevelScreen)
    }

    public interface BackgroundOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       */
      int getId();

      // optional .monkeyshines.World.BackgroundType type = 2;
      /**
       * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
       */
      boolean hasType();
      /**
       * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType getType();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Background}
     *
     * <pre>
     * Note: the id of the background is used for Patterns and Full backgrounds as that; an id. But
     * for Solid Color, it is a 32 bit ARGB color code.
     * </pre>
     */
    public static final class Background extends
        com.google.protobuf.GeneratedMessage
        implements BackgroundOrBuilder {
      // Use Background.newBuilder() to construct.
      private Background(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Background(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Background defaultInstance;
      public static Background getDefaultInstance() {
        return defaultInstance;
      }

      public Background getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Background(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  type_ = value;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Background_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Background_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder.class);
      }

      public static com.google.protobuf.Parser<Background> PARSER =
          new com.google.protobuf.AbstractParser<Background>() {
        public Background parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Background(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Background> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      // optional .monkeyshines.World.BackgroundType type = 2;
      public static final int TYPE_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType type_;
      /**
       * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType getType() {
        return type_;
      }

      private void initFields() {
        id_ = 0;
        type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType.PATTERN;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, type_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, type_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Background}
       *
       * <pre>
       * Note: the id of the background is used for Patterns and Full backgrounds as that; an id. But
       * for Solid Color, it is a 32 bit ARGB color code.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Background_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Background_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType.PATTERN;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Background_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.type_ = type_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Background) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.BackgroundType type = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType.PATTERN;
        /**
         * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType getType() {
          return type_;
        }
        /**
         * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
         */
        public Builder setType(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.BackgroundType type = 2;</code>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000002);
          type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BackgroundType.PATTERN;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Background)
      }

      static {
        defaultInstance = new Background(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Background)
    }

    public interface SpriteOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       */
      int getId();

      // optional .monkeyshines.World.Point start_location = 2;
      /**
       * <code>optional .monkeyshines.World.Point start_location = 2;</code>
       */
      boolean hasStartLocation();
      /**
       * <code>optional .monkeyshines.World.Point start_location = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getStartLocation();
      /**
       * <code>optional .monkeyshines.World.Point start_location = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getStartLocationOrBuilder();

      // optional .monkeyshines.World.Box bounding_box = 3;
      /**
       * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
       */
      boolean hasBoundingBox();
      /**
       * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box getBoundingBox();
      /**
       * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder getBoundingBoxOrBuilder();

      // optional .monkeyshines.World.Point initial_speed = 4;
      /**
       * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
       */
      boolean hasInitialSpeed();
      /**
       * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getInitialSpeed();
      /**
       * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getInitialSpeedOrBuilder();

      // optional .monkeyshines.World.AnimationType animation = 5;
      /**
       * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
       */
      boolean hasAnimation();
      /**
       * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType getAnimation();

      // optional .monkeyshines.World.AnimationSpeed animation_speed = 6;
      /**
       * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
       */
      boolean hasAnimationSpeed();
      /**
       * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed getAnimationSpeed();

      // optional .monkeyshines.World.SpriteType type = 7;
      /**
       * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
       */
      boolean hasType();
      /**
       * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType getType();

      // optional .monkeyshines.World.ForcedDirection forced_direction = 8;
      /**
       * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
       */
      boolean hasForcedDirection();
      /**
       * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection getForcedDirection();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Sprite}
     */
    public static final class Sprite extends
        com.google.protobuf.GeneratedMessage
        implements SpriteOrBuilder {
      // Use Sprite.newBuilder() to construct.
      private Sprite(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Sprite(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Sprite defaultInstance;
      public static Sprite getDefaultInstance() {
        return defaultInstance;
      }

      public Sprite getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Sprite(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 18: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = startLocation_.toBuilder();
                }
                startLocation_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(startLocation_);
                  startLocation_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = boundingBox_.toBuilder();
                }
                boundingBox_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(boundingBox_);
                  boundingBox_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = initialSpeed_.toBuilder();
                }
                initialSpeed_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(initialSpeed_);
                  initialSpeed_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 40: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(5, rawValue);
                } else {
                  bitField0_ |= 0x00000010;
                  animation_ = value;
                }
                break;
              }
              case 48: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(6, rawValue);
                } else {
                  bitField0_ |= 0x00000020;
                  animationSpeed_ = value;
                }
                break;
              }
              case 56: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(7, rawValue);
                } else {
                  bitField0_ |= 0x00000040;
                  type_ = value;
                }
                break;
              }
              case 64: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(8, rawValue);
                } else {
                  bitField0_ |= 0x00000080;
                  forcedDirection_ = value;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Sprite_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Sprite_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder.class);
      }

      public static com.google.protobuf.Parser<Sprite> PARSER =
          new com.google.protobuf.AbstractParser<Sprite>() {
        public Sprite parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Sprite(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Sprite> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      // optional .monkeyshines.World.Point start_location = 2;
      public static final int START_LOCATION_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point startLocation_;
      /**
       * <code>optional .monkeyshines.World.Point start_location = 2;</code>
       */
      public boolean hasStartLocation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .monkeyshines.World.Point start_location = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getStartLocation() {
        return startLocation_;
      }
      /**
       * <code>optional .monkeyshines.World.Point start_location = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getStartLocationOrBuilder() {
        return startLocation_;
      }

      // optional .monkeyshines.World.Box bounding_box = 3;
      public static final int BOUNDING_BOX_FIELD_NUMBER = 3;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box boundingBox_;
      /**
       * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
       */
      public boolean hasBoundingBox() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box getBoundingBox() {
        return boundingBox_;
      }
      /**
       * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder getBoundingBoxOrBuilder() {
        return boundingBox_;
      }

      // optional .monkeyshines.World.Point initial_speed = 4;
      public static final int INITIAL_SPEED_FIELD_NUMBER = 4;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point initialSpeed_;
      /**
       * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
       */
      public boolean hasInitialSpeed() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getInitialSpeed() {
        return initialSpeed_;
      }
      /**
       * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getInitialSpeedOrBuilder() {
        return initialSpeed_;
      }

      // optional .monkeyshines.World.AnimationType animation = 5;
      public static final int ANIMATION_FIELD_NUMBER = 5;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType animation_;
      /**
       * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
       */
      public boolean hasAnimation() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType getAnimation() {
        return animation_;
      }

      // optional .monkeyshines.World.AnimationSpeed animation_speed = 6;
      public static final int ANIMATION_SPEED_FIELD_NUMBER = 6;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed animationSpeed_;
      /**
       * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
       */
      public boolean hasAnimationSpeed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed getAnimationSpeed() {
        return animationSpeed_;
      }

      // optional .monkeyshines.World.SpriteType type = 7;
      public static final int TYPE_FIELD_NUMBER = 7;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType type_;
      /**
       * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType getType() {
        return type_;
      }

      // optional .monkeyshines.World.ForcedDirection forced_direction = 8;
      public static final int FORCED_DIRECTION_FIELD_NUMBER = 8;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection forcedDirection_;
      /**
       * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
       */
      public boolean hasForcedDirection() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection getForcedDirection() {
        return forcedDirection_;
      }

      private void initFields() {
        id_ = 0;
        startLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        boundingBox_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance();
        initialSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        animation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType.INCREASING_FRAMES;
        animationSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed.NORMAL_SPEED;
        type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType.NORMAL;
        forcedDirection_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection.FORCED_NONE;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasStartLocation()) {
          if (!getStartLocation().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasBoundingBox()) {
          if (!getBoundingBox().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasInitialSpeed()) {
          if (!getInitialSpeed().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, startLocation_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, boundingBox_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(4, initialSpeed_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeEnum(5, animation_.getNumber());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeEnum(6, animationSpeed_.getNumber());
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeEnum(7, type_.getNumber());
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeEnum(8, forcedDirection_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, startLocation_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, boundingBox_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, initialSpeed_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(5, animation_.getNumber());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(6, animationSpeed_.getNumber());
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(7, type_.getNumber());
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(8, forcedDirection_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Sprite}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Sprite_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Sprite_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStartLocationFieldBuilder();
            getBoundingBoxFieldBuilder();
            getInitialSpeedFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (startLocationBuilder_ == null) {
            startLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            startLocationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (boundingBoxBuilder_ == null) {
            boundingBox_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance();
          } else {
            boundingBoxBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (initialSpeedBuilder_ == null) {
            initialSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            initialSpeedBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          animation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType.INCREASING_FRAMES;
          bitField0_ = (bitField0_ & ~0x00000010);
          animationSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed.NORMAL_SPEED;
          bitField0_ = (bitField0_ & ~0x00000020);
          type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType.NORMAL;
          bitField0_ = (bitField0_ & ~0x00000040);
          forcedDirection_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection.FORCED_NONE;
          bitField0_ = (bitField0_ & ~0x00000080);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Sprite_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (startLocationBuilder_ == null) {
            result.startLocation_ = startLocation_;
          } else {
            result.startLocation_ = startLocationBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (boundingBoxBuilder_ == null) {
            result.boundingBox_ = boundingBox_;
          } else {
            result.boundingBox_ = boundingBoxBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (initialSpeedBuilder_ == null) {
            result.initialSpeed_ = initialSpeed_;
          } else {
            result.initialSpeed_ = initialSpeedBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.animation_ = animation_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.animationSpeed_ = animationSpeed_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          result.forcedDirection_ = forcedDirection_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasStartLocation()) {
            mergeStartLocation(other.getStartLocation());
          }
          if (other.hasBoundingBox()) {
            mergeBoundingBox(other.getBoundingBox());
          }
          if (other.hasInitialSpeed()) {
            mergeInitialSpeed(other.getInitialSpeed());
          }
          if (other.hasAnimation()) {
            setAnimation(other.getAnimation());
          }
          if (other.hasAnimationSpeed()) {
            setAnimationSpeed(other.getAnimationSpeed());
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasForcedDirection()) {
            setForcedDirection(other.getForcedDirection());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasStartLocation()) {
            if (!getStartLocation().isInitialized()) {
              
              return false;
            }
          }
          if (hasBoundingBox()) {
            if (!getBoundingBox().isInitialized()) {
              
              return false;
            }
          }
          if (hasInitialSpeed()) {
            if (!getInitialSpeed().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Sprite) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.Point start_location = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point startLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> startLocationBuilder_;
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public boolean hasStartLocation() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getStartLocation() {
          if (startLocationBuilder_ == null) {
            return startLocation_;
          } else {
            return startLocationBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public Builder setStartLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (startLocationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            startLocation_ = value;
            onChanged();
          } else {
            startLocationBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public Builder setStartLocation(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (startLocationBuilder_ == null) {
            startLocation_ = builderForValue.build();
            onChanged();
          } else {
            startLocationBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public Builder mergeStartLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (startLocationBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                startLocation_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              startLocation_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(startLocation_).mergeFrom(value).buildPartial();
            } else {
              startLocation_ = value;
            }
            onChanged();
          } else {
            startLocationBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public Builder clearStartLocation() {
          if (startLocationBuilder_ == null) {
            startLocation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            startLocationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getStartLocationBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getStartLocationFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getStartLocationOrBuilder() {
          if (startLocationBuilder_ != null) {
            return startLocationBuilder_.getMessageOrBuilder();
          } else {
            return startLocation_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point start_location = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getStartLocationFieldBuilder() {
          if (startLocationBuilder_ == null) {
            startLocationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    startLocation_,
                    getParentForChildren(),
                    isClean());
            startLocation_ = null;
          }
          return startLocationBuilder_;
        }

        // optional .monkeyshines.World.Box bounding_box = 3;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box boundingBox_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder> boundingBoxBuilder_;
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public boolean hasBoundingBox() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box getBoundingBox() {
          if (boundingBoxBuilder_ == null) {
            return boundingBox_;
          } else {
            return boundingBoxBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public Builder setBoundingBox(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box value) {
          if (boundingBoxBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            boundingBox_ = value;
            onChanged();
          } else {
            boundingBoxBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public Builder setBoundingBox(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder builderForValue) {
          if (boundingBoxBuilder_ == null) {
            boundingBox_ = builderForValue.build();
            onChanged();
          } else {
            boundingBoxBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public Builder mergeBoundingBox(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box value) {
          if (boundingBoxBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                boundingBox_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance()) {
              boundingBox_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.newBuilder(boundingBox_).mergeFrom(value).buildPartial();
            } else {
              boundingBox_ = value;
            }
            onChanged();
          } else {
            boundingBoxBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public Builder clearBoundingBox() {
          if (boundingBoxBuilder_ == null) {
            boundingBox_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.getDefaultInstance();
            onChanged();
          } else {
            boundingBoxBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder getBoundingBoxBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getBoundingBoxFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder getBoundingBoxOrBuilder() {
          if (boundingBoxBuilder_ != null) {
            return boundingBoxBuilder_.getMessageOrBuilder();
          } else {
            return boundingBox_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Box bounding_box = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder> 
            getBoundingBoxFieldBuilder() {
          if (boundingBoxBuilder_ == null) {
            boundingBoxBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Box.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.BoxOrBuilder>(
                    boundingBox_,
                    getParentForChildren(),
                    isClean());
            boundingBox_ = null;
          }
          return boundingBoxBuilder_;
        }

        // optional .monkeyshines.World.Point initial_speed = 4;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point initialSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> initialSpeedBuilder_;
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public boolean hasInitialSpeed() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getInitialSpeed() {
          if (initialSpeedBuilder_ == null) {
            return initialSpeed_;
          } else {
            return initialSpeedBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public Builder setInitialSpeed(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (initialSpeedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            initialSpeed_ = value;
            onChanged();
          } else {
            initialSpeedBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public Builder setInitialSpeed(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (initialSpeedBuilder_ == null) {
            initialSpeed_ = builderForValue.build();
            onChanged();
          } else {
            initialSpeedBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public Builder mergeInitialSpeed(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (initialSpeedBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                initialSpeed_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              initialSpeed_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(initialSpeed_).mergeFrom(value).buildPartial();
            } else {
              initialSpeed_ = value;
            }
            onChanged();
          } else {
            initialSpeedBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public Builder clearInitialSpeed() {
          if (initialSpeedBuilder_ == null) {
            initialSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            initialSpeedBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getInitialSpeedBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getInitialSpeedFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getInitialSpeedOrBuilder() {
          if (initialSpeedBuilder_ != null) {
            return initialSpeedBuilder_.getMessageOrBuilder();
          } else {
            return initialSpeed_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point initial_speed = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getInitialSpeedFieldBuilder() {
          if (initialSpeedBuilder_ == null) {
            initialSpeedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    initialSpeed_,
                    getParentForChildren(),
                    isClean());
            initialSpeed_ = null;
          }
          return initialSpeedBuilder_;
        }

        // optional .monkeyshines.World.AnimationType animation = 5;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType animation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType.INCREASING_FRAMES;
        /**
         * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
         */
        public boolean hasAnimation() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType getAnimation() {
          return animation_;
        }
        /**
         * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
         */
        public Builder setAnimation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000010;
          animation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.AnimationType animation = 5;</code>
         */
        public Builder clearAnimation() {
          bitField0_ = (bitField0_ & ~0x00000010);
          animation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationType.INCREASING_FRAMES;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.AnimationSpeed animation_speed = 6;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed animationSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed.NORMAL_SPEED;
        /**
         * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
         */
        public boolean hasAnimationSpeed() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed getAnimationSpeed() {
          return animationSpeed_;
        }
        /**
         * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
         */
        public Builder setAnimationSpeed(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000020;
          animationSpeed_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.AnimationSpeed animation_speed = 6;</code>
         */
        public Builder clearAnimationSpeed() {
          bitField0_ = (bitField0_ & ~0x00000020);
          animationSpeed_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.AnimationSpeed.NORMAL_SPEED;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.SpriteType type = 7;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType.NORMAL;
        /**
         * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType getType() {
          return type_;
        }
        /**
         * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
         */
        public Builder setType(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000040;
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.SpriteType type = 7;</code>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000040);
          type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.SpriteType.NORMAL;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.ForcedDirection forced_direction = 8;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection forcedDirection_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection.FORCED_NONE;
        /**
         * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
         */
        public boolean hasForcedDirection() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection getForcedDirection() {
          return forcedDirection_;
        }
        /**
         * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
         */
        public Builder setForcedDirection(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000080;
          forcedDirection_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.ForcedDirection forced_direction = 8;</code>
         */
        public Builder clearForcedDirection() {
          bitField0_ = (bitField0_ & ~0x00000080);
          forcedDirection_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.ForcedDirection.FORCED_NONE;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Sprite)
      }

      static {
        defaultInstance = new Sprite(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Sprite)
    }

    public interface TileOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 id = 1;
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * No matter the tile type, Id gives the graphics context to use, whether the index
       * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
       * </pre>
       */
      boolean hasId();
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * No matter the tile type, Id gives the graphics context to use, whether the index
       * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
       * </pre>
       */
      int getId();

      // optional .monkeyshines.World.Point location = 2;
      /**
       * <code>optional .monkeyshines.World.Point location = 2;</code>
       */
      boolean hasLocation();
      /**
       * <code>optional .monkeyshines.World.Point location = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getLocation();
      /**
       * <code>optional .monkeyshines.World.Point location = 2;</code>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getLocationOrBuilder();

      // optional .monkeyshines.World.TileType type = 3;
      /**
       * <code>optional .monkeyshines.World.TileType type = 3;</code>
       *
       * <pre>
       * Tile type determine which of the following fields, if any, are relevant
       * </pre>
       */
      boolean hasType();
      /**
       * <code>optional .monkeyshines.World.TileType type = 3;</code>
       *
       * <pre>
       * Tile type determine which of the following fields, if any, are relevant
       * </pre>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType getType();

      // optional .monkeyshines.World.Rotation rotation = 4;
      /**
       * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
       *
       * <pre>
       * Only used for conveyer belts
       * </pre>
       */
      boolean hasRotation();
      /**
       * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
       *
       * <pre>
       * Only used for conveyer belts
       * </pre>
       */
      org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation getRotation();
    }
    /**
     * Protobuf type {@code monkeyshines.World.Tile}
     */
    public static final class Tile extends
        com.google.protobuf.GeneratedMessage
        implements TileOrBuilder {
      // Use Tile.newBuilder() to construct.
      private Tile(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Tile(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Tile defaultInstance;
      public static Tile getDefaultInstance() {
        return defaultInstance;
      }

      public Tile getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Tile(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 18: {
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = location_.toBuilder();
                }
                location_ = input.readMessage(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(location_);
                  location_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  type_ = value;
                }
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation value = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  rotation_ = value;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Tile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Tile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder.class);
      }

      public static com.google.protobuf.Parser<Tile> PARSER =
          new com.google.protobuf.AbstractParser<Tile>() {
        public Tile parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Tile(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Tile> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * No matter the tile type, Id gives the graphics context to use, whether the index
       * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * No matter the tile type, Id gives the graphics context to use, whether the index
       * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
       * </pre>
       */
      public int getId() {
        return id_;
      }

      // optional .monkeyshines.World.Point location = 2;
      public static final int LOCATION_FIELD_NUMBER = 2;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point location_;
      /**
       * <code>optional .monkeyshines.World.Point location = 2;</code>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .monkeyshines.World.Point location = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getLocation() {
        return location_;
      }
      /**
       * <code>optional .monkeyshines.World.Point location = 2;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getLocationOrBuilder() {
        return location_;
      }

      // optional .monkeyshines.World.TileType type = 3;
      public static final int TYPE_FIELD_NUMBER = 3;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType type_;
      /**
       * <code>optional .monkeyshines.World.TileType type = 3;</code>
       *
       * <pre>
       * Tile type determine which of the following fields, if any, are relevant
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .monkeyshines.World.TileType type = 3;</code>
       *
       * <pre>
       * Tile type determine which of the following fields, if any, are relevant
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType getType() {
        return type_;
      }

      // optional .monkeyshines.World.Rotation rotation = 4;
      public static final int ROTATION_FIELD_NUMBER = 4;
      private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation rotation_;
      /**
       * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
       *
       * <pre>
       * Only used for conveyer belts
       * </pre>
       */
      public boolean hasRotation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
       *
       * <pre>
       * Only used for conveyer belts
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation getRotation() {
        return rotation_;
      }

      private void initFields() {
        id_ = 0;
        location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType.SOLID;
        rotation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation.CLOCKWISE;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, location_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeEnum(3, type_.getNumber());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeEnum(4, rotation_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, location_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, type_.getNumber());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, rotation_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code monkeyshines.World.Tile}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Tile_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Tile_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.Builder.class);
        }

        // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getLocationFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (locationBuilder_ == null) {
            location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
          } else {
            locationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType.SOLID;
          bitField0_ = (bitField0_ & ~0x00000004);
          rotation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation.CLOCKWISE;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_Tile_descriptor;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile getDefaultInstanceForType() {
          return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.getDefaultInstance();
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile build() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile buildPartial() {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (locationBuilder_ == null) {
            result.location_ = location_;
          } else {
            result.location_ = locationBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.rotation_ = rotation_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile) {
            return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile other) {
          if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasLocation()) {
            mergeLocation(other.getLocation());
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasRotation()) {
            setRotation(other.getRotation());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasLocation()) {
            if (!getLocation().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Tile) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 id = 1;
        private int id_ ;
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * No matter the tile type, Id gives the graphics context to use, whether the index
         * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
         * </pre>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * No matter the tile type, Id gives the graphics context to use, whether the index
         * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
         * </pre>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * No matter the tile type, Id gives the graphics context to use, whether the index
         * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
         * </pre>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 id = 1;</code>
         *
         * <pre>
         * No matter the tile type, Id gives the graphics context to use, whether the index
         * in the array for covneyers, the hazard id, or the solid/thru/scenery id.
         * </pre>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.Point location = 2;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> locationBuilder_;
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public boolean hasLocation() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point getLocation() {
          if (locationBuilder_ == null) {
            return location_;
          } else {
            return locationBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public Builder setLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (locationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            location_ = value;
            onChanged();
          } else {
            locationBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public Builder setLocation(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder builderForValue) {
          if (locationBuilder_ == null) {
            location_ = builderForValue.build();
            onChanged();
          } else {
            locationBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public Builder mergeLocation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point value) {
          if (locationBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                location_ != org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance()) {
              location_ =
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.newBuilder(location_).mergeFrom(value).buildPartial();
            } else {
              location_ = value;
            }
            onChanged();
          } else {
            locationBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public Builder clearLocation() {
          if (locationBuilder_ == null) {
            location_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.getDefaultInstance();
            onChanged();
          } else {
            locationBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder getLocationBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getLocationFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder getLocationOrBuilder() {
          if (locationBuilder_ != null) {
            return locationBuilder_.getMessageOrBuilder();
          } else {
            return location_;
          }
        }
        /**
         * <code>optional .monkeyshines.World.Point location = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder> 
            getLocationFieldBuilder() {
          if (locationBuilder_ == null) {
            locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Point.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.PointOrBuilder>(
                    location_,
                    getParentForChildren(),
                    isClean());
            location_ = null;
          }
          return locationBuilder_;
        }

        // optional .monkeyshines.World.TileType type = 3;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType.SOLID;
        /**
         * <code>optional .monkeyshines.World.TileType type = 3;</code>
         *
         * <pre>
         * Tile type determine which of the following fields, if any, are relevant
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .monkeyshines.World.TileType type = 3;</code>
         *
         * <pre>
         * Tile type determine which of the following fields, if any, are relevant
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType getType() {
          return type_;
        }
        /**
         * <code>optional .monkeyshines.World.TileType type = 3;</code>
         *
         * <pre>
         * Tile type determine which of the following fields, if any, are relevant
         * </pre>
         */
        public Builder setType(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000004;
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.TileType type = 3;</code>
         *
         * <pre>
         * Tile type determine which of the following fields, if any, are relevant
         * </pre>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000004);
          type_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.TileType.SOLID;
          onChanged();
          return this;
        }

        // optional .monkeyshines.World.Rotation rotation = 4;
        private org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation rotation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation.CLOCKWISE;
        /**
         * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
         *
         * <pre>
         * Only used for conveyer belts
         * </pre>
         */
        public boolean hasRotation() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
         *
         * <pre>
         * Only used for conveyer belts
         * </pre>
         */
        public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation getRotation() {
          return rotation_;
        }
        /**
         * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
         *
         * <pre>
         * Only used for conveyer belts
         * </pre>
         */
        public Builder setRotation(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          rotation_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .monkeyshines.World.Rotation rotation = 4;</code>
         *
         * <pre>
         * Only used for conveyer belts
         * </pre>
         */
        public Builder clearRotation() {
          bitField0_ = (bitField0_ & ~0x00000008);
          rotation_ = org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Rotation.CLOCKWISE;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:monkeyshines.World.Tile)
      }

      static {
        defaultInstance = new Tile(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:monkeyshines.World.Tile)
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;
    public static final int GOODIES_FIELD_NUMBER = 2;
    private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple> goodies_;
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple> getGoodiesList() {
      return goodies_;
    }
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder> 
        getGoodiesOrBuilderList() {
      return goodies_;
    }
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    public int getGoodiesCount() {
      return goodies_.size();
    }
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple getGoodies(int index) {
      return goodies_.get(index);
    }
    /**
     * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
     *
     * <pre>
     * Map&lt;String, Goodie&gt;
     * </pre>
     */
    public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder getGoodiesOrBuilder(
        int index) {
      return goodies_.get(index);
    }

    // repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;
    public static final int LEVELS_FIELD_NUMBER = 3;
    private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple> levels_;
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple> getLevelsList() {
      return levels_;
    }
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder> 
        getLevelsOrBuilderList() {
      return levels_;
    }
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    public int getLevelsCount() {
      return levels_.size();
    }
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple getLevels(int index) {
      return levels_.get(index);
    }
    /**
     * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
     *
     * <pre>
     * Map&lt;Integer, Level&gt;
     * </pre>
     */
    public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder getLevelsOrBuilder(
        int index) {
      return levels_.get(index);
    }

    // repeated .monkeyshines.World.Hazard hazards = 4;
    public static final int HAZARDS_FIELD_NUMBER = 4;
    private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard> hazards_;
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard> getHazardsList() {
      return hazards_;
    }
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder> 
        getHazardsOrBuilderList() {
      return hazards_;
    }
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    public int getHazardsCount() {
      return hazards_.size();
    }
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard getHazards(int index) {
      return hazards_.get(index);
    }
    /**
     * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
     */
    public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder getHazardsOrBuilder(
        int index) {
      return hazards_.get(index);
    }

    // optional uint32 bonus_screen = 5;
    public static final int BONUS_SCREEN_FIELD_NUMBER = 5;
    private int bonusScreen_;
    /**
     * <code>optional uint32 bonus_screen = 5;</code>
     *
     * <pre>
     * In the original game, this was always 10000. In fact, new levels
     * default to 10000
     * </pre>
     */
    public boolean hasBonusScreen() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 bonus_screen = 5;</code>
     *
     * <pre>
     * In the original game, this was always 10000. In fact, new levels
     * default to 10000
     * </pre>
     */
    public int getBonusScreen() {
      return bonusScreen_;
    }

    // optional string author = 6;
    public static final int AUTHOR_FIELD_NUMBER = 6;
    private java.lang.Object author_;
    /**
     * <code>optional string author = 6;</code>
     *
     * <pre>
     * Following fields were not available in original:
     * </pre>
     */
    public boolean hasAuthor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string author = 6;</code>
     *
     * <pre>
     * Following fields were not available in original:
     * </pre>
     */
    public java.lang.String getAuthor() {
      java.lang.Object ref = author_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          author_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string author = 6;</code>
     *
     * <pre>
     * Following fields were not available in original:
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAuthorBytes() {
      java.lang.Object ref = author_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        author_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 return_screen = 7;
    public static final int RETURN_SCREEN_FIELD_NUMBER = 7;
    private int returnScreen_;
    /**
     * <code>optional uint32 return_screen = 7;</code>
     *
     * <pre>
     * Added as an attempt to make bonus screens, but is now calculated
     * dynamically. The value still exists in the world but is set during
     * gameplay.
     * </pre>
     */
    public boolean hasReturnScreen() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 return_screen = 7;</code>
     *
     * <pre>
     * Added as an attempt to make bonus screens, but is now calculated
     * dynamically. The value still exists in the world but is set during
     * gameplay.
     * </pre>
     */
    public int getReturnScreen() {
      return returnScreen_;
    }

    private void initFields() {
      name_ = "";
      goodies_ = java.util.Collections.emptyList();
      levels_ = java.util.Collections.emptyList();
      hazards_ = java.util.Collections.emptyList();
      bonusScreen_ = 0;
      author_ = "";
      returnScreen_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getGoodiesCount(); i++) {
        if (!getGoodies(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getLevelsCount(); i++) {
        if (!getLevels(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      for (int i = 0; i < goodies_.size(); i++) {
        output.writeMessage(2, goodies_.get(i));
      }
      for (int i = 0; i < levels_.size(); i++) {
        output.writeMessage(3, levels_.get(i));
      }
      for (int i = 0; i < hazards_.size(); i++) {
        output.writeMessage(4, hazards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(5, bonusScreen_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(6, getAuthorBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(7, returnScreen_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      for (int i = 0; i < goodies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, goodies_.get(i));
      }
      for (int i = 0; i < levels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, levels_.get(i));
      }
      for (int i = 0; i < hazards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, hazards_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, bonusScreen_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getAuthorBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, returnScreen_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code monkeyshines.World}
     *
     * <pre>
     * compile with
     * protoc -I=src --java_out=src src/org/erikaredmark/monkeyshines/encoder/proto/world_file_format.proto
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.WorldOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.class, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Builder.class);
      }

      // Construct using org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGoodiesFieldBuilder();
          getLevelsFieldBuilder();
          getHazardsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (goodiesBuilder_ == null) {
          goodies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          goodiesBuilder_.clear();
        }
        if (levelsBuilder_ == null) {
          levels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          levelsBuilder_.clear();
        }
        if (hazardsBuilder_ == null) {
          hazards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          hazardsBuilder_.clear();
        }
        bonusScreen_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        author_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        returnScreen_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.internal_static_monkeyshines_World_descriptor;
      }

      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World getDefaultInstanceForType() {
        return org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDefaultInstance();
      }

      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World build() {
        org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World buildPartial() {
        org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World result = new org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (goodiesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            goodies_ = java.util.Collections.unmodifiableList(goodies_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.goodies_ = goodies_;
        } else {
          result.goodies_ = goodiesBuilder_.build();
        }
        if (levelsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            levels_ = java.util.Collections.unmodifiableList(levels_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.levels_ = levels_;
        } else {
          result.levels_ = levelsBuilder_.build();
        }
        if (hazardsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            hazards_ = java.util.Collections.unmodifiableList(hazards_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.hazards_ = hazards_;
        } else {
          result.hazards_ = hazardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bonusScreen_ = bonusScreen_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.author_ = author_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.returnScreen_ = returnScreen_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World) {
          return mergeFrom((org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World other) {
        if (other == org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (goodiesBuilder_ == null) {
          if (!other.goodies_.isEmpty()) {
            if (goodies_.isEmpty()) {
              goodies_ = other.goodies_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureGoodiesIsMutable();
              goodies_.addAll(other.goodies_);
            }
            onChanged();
          }
        } else {
          if (!other.goodies_.isEmpty()) {
            if (goodiesBuilder_.isEmpty()) {
              goodiesBuilder_.dispose();
              goodiesBuilder_ = null;
              goodies_ = other.goodies_;
              bitField0_ = (bitField0_ & ~0x00000002);
              goodiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGoodiesFieldBuilder() : null;
            } else {
              goodiesBuilder_.addAllMessages(other.goodies_);
            }
          }
        }
        if (levelsBuilder_ == null) {
          if (!other.levels_.isEmpty()) {
            if (levels_.isEmpty()) {
              levels_ = other.levels_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureLevelsIsMutable();
              levels_.addAll(other.levels_);
            }
            onChanged();
          }
        } else {
          if (!other.levels_.isEmpty()) {
            if (levelsBuilder_.isEmpty()) {
              levelsBuilder_.dispose();
              levelsBuilder_ = null;
              levels_ = other.levels_;
              bitField0_ = (bitField0_ & ~0x00000004);
              levelsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLevelsFieldBuilder() : null;
            } else {
              levelsBuilder_.addAllMessages(other.levels_);
            }
          }
        }
        if (hazardsBuilder_ == null) {
          if (!other.hazards_.isEmpty()) {
            if (hazards_.isEmpty()) {
              hazards_ = other.hazards_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureHazardsIsMutable();
              hazards_.addAll(other.hazards_);
            }
            onChanged();
          }
        } else {
          if (!other.hazards_.isEmpty()) {
            if (hazardsBuilder_.isEmpty()) {
              hazardsBuilder_.dispose();
              hazardsBuilder_ = null;
              hazards_ = other.hazards_;
              bitField0_ = (bitField0_ & ~0x00000008);
              hazardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHazardsFieldBuilder() : null;
            } else {
              hazardsBuilder_.addAllMessages(other.hazards_);
            }
          }
        }
        if (other.hasBonusScreen()) {
          setBonusScreen(other.getBonusScreen());
        }
        if (other.hasAuthor()) {
          bitField0_ |= 0x00000020;
          author_ = other.author_;
          onChanged();
        }
        if (other.hasReturnScreen()) {
          setReturnScreen(other.getReturnScreen());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getGoodiesCount(); i++) {
          if (!getGoodies(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getLevelsCount(); i++) {
          if (!getLevels(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;
      private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple> goodies_ =
        java.util.Collections.emptyList();
      private void ensureGoodiesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          goodies_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple>(goodies_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder> goodiesBuilder_;

      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple> getGoodiesList() {
        if (goodiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(goodies_);
        } else {
          return goodiesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public int getGoodiesCount() {
        if (goodiesBuilder_ == null) {
          return goodies_.size();
        } else {
          return goodiesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple getGoodies(int index) {
        if (goodiesBuilder_ == null) {
          return goodies_.get(index);
        } else {
          return goodiesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder setGoodies(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple value) {
        if (goodiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGoodiesIsMutable();
          goodies_.set(index, value);
          onChanged();
        } else {
          goodiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder setGoodies(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder builderForValue) {
        if (goodiesBuilder_ == null) {
          ensureGoodiesIsMutable();
          goodies_.set(index, builderForValue.build());
          onChanged();
        } else {
          goodiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder addGoodies(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple value) {
        if (goodiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGoodiesIsMutable();
          goodies_.add(value);
          onChanged();
        } else {
          goodiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder addGoodies(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple value) {
        if (goodiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGoodiesIsMutable();
          goodies_.add(index, value);
          onChanged();
        } else {
          goodiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder addGoodies(
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder builderForValue) {
        if (goodiesBuilder_ == null) {
          ensureGoodiesIsMutable();
          goodies_.add(builderForValue.build());
          onChanged();
        } else {
          goodiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder addGoodies(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder builderForValue) {
        if (goodiesBuilder_ == null) {
          ensureGoodiesIsMutable();
          goodies_.add(index, builderForValue.build());
          onChanged();
        } else {
          goodiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder addAllGoodies(
          java.lang.Iterable<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple> values) {
        if (goodiesBuilder_ == null) {
          ensureGoodiesIsMutable();
          super.addAll(values, goodies_);
          onChanged();
        } else {
          goodiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder clearGoodies() {
        if (goodiesBuilder_ == null) {
          goodies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          goodiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public Builder removeGoodies(int index) {
        if (goodiesBuilder_ == null) {
          ensureGoodiesIsMutable();
          goodies_.remove(index);
          onChanged();
        } else {
          goodiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder getGoodiesBuilder(
          int index) {
        return getGoodiesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder getGoodiesOrBuilder(
          int index) {
        if (goodiesBuilder_ == null) {
          return goodies_.get(index);  } else {
          return goodiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder> 
           getGoodiesOrBuilderList() {
        if (goodiesBuilder_ != null) {
          return goodiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(goodies_);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder addGoodiesBuilder() {
        return getGoodiesFieldBuilder().addBuilder(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder addGoodiesBuilder(
          int index) {
        return getGoodiesFieldBuilder().addBuilder(
            index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .monkeyshines.World.StringToGoodieTuple goodies = 2;</code>
       *
       * <pre>
       * Map&lt;String, Goodie&gt;
       * </pre>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder> 
           getGoodiesBuilderList() {
        return getGoodiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder> 
          getGoodiesFieldBuilder() {
        if (goodiesBuilder_ == null) {
          goodiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTuple.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.StringToGoodieTupleOrBuilder>(
                  goodies_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          goodies_ = null;
        }
        return goodiesBuilder_;
      }

      // repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;
      private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple> levels_ =
        java.util.Collections.emptyList();
      private void ensureLevelsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          levels_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple>(levels_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder> levelsBuilder_;

      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple> getLevelsList() {
        if (levelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(levels_);
        } else {
          return levelsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public int getLevelsCount() {
        if (levelsBuilder_ == null) {
          return levels_.size();
        } else {
          return levelsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple getLevels(int index) {
        if (levelsBuilder_ == null) {
          return levels_.get(index);
        } else {
          return levelsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder setLevels(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple value) {
        if (levelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLevelsIsMutable();
          levels_.set(index, value);
          onChanged();
        } else {
          levelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder setLevels(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder builderForValue) {
        if (levelsBuilder_ == null) {
          ensureLevelsIsMutable();
          levels_.set(index, builderForValue.build());
          onChanged();
        } else {
          levelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder addLevels(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple value) {
        if (levelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLevelsIsMutable();
          levels_.add(value);
          onChanged();
        } else {
          levelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder addLevels(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple value) {
        if (levelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLevelsIsMutable();
          levels_.add(index, value);
          onChanged();
        } else {
          levelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder addLevels(
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder builderForValue) {
        if (levelsBuilder_ == null) {
          ensureLevelsIsMutable();
          levels_.add(builderForValue.build());
          onChanged();
        } else {
          levelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder addLevels(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder builderForValue) {
        if (levelsBuilder_ == null) {
          ensureLevelsIsMutable();
          levels_.add(index, builderForValue.build());
          onChanged();
        } else {
          levelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder addAllLevels(
          java.lang.Iterable<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple> values) {
        if (levelsBuilder_ == null) {
          ensureLevelsIsMutable();
          super.addAll(values, levels_);
          onChanged();
        } else {
          levelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder clearLevels() {
        if (levelsBuilder_ == null) {
          levels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          levelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public Builder removeLevels(int index) {
        if (levelsBuilder_ == null) {
          ensureLevelsIsMutable();
          levels_.remove(index);
          onChanged();
        } else {
          levelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder getLevelsBuilder(
          int index) {
        return getLevelsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder getLevelsOrBuilder(
          int index) {
        if (levelsBuilder_ == null) {
          return levels_.get(index);  } else {
          return levelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder> 
           getLevelsOrBuilderList() {
        if (levelsBuilder_ != null) {
          return levelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(levels_);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder addLevelsBuilder() {
        return getLevelsFieldBuilder().addBuilder(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder addLevelsBuilder(
          int index) {
        return getLevelsFieldBuilder().addBuilder(
            index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .monkeyshines.World.IntegerToLevelTuple levels = 3;</code>
       *
       * <pre>
       * Map&lt;Integer, Level&gt;
       * </pre>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder> 
           getLevelsBuilderList() {
        return getLevelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder> 
          getLevelsFieldBuilder() {
        if (levelsBuilder_ == null) {
          levelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTuple.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.IntegerToLevelTupleOrBuilder>(
                  levels_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          levels_ = null;
        }
        return levelsBuilder_;
      }

      // repeated .monkeyshines.World.Hazard hazards = 4;
      private java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard> hazards_ =
        java.util.Collections.emptyList();
      private void ensureHazardsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          hazards_ = new java.util.ArrayList<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard>(hazards_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder> hazardsBuilder_;

      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard> getHazardsList() {
        if (hazardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(hazards_);
        } else {
          return hazardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public int getHazardsCount() {
        if (hazardsBuilder_ == null) {
          return hazards_.size();
        } else {
          return hazardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard getHazards(int index) {
        if (hazardsBuilder_ == null) {
          return hazards_.get(index);
        } else {
          return hazardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder setHazards(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard value) {
        if (hazardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHazardsIsMutable();
          hazards_.set(index, value);
          onChanged();
        } else {
          hazardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder setHazards(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder builderForValue) {
        if (hazardsBuilder_ == null) {
          ensureHazardsIsMutable();
          hazards_.set(index, builderForValue.build());
          onChanged();
        } else {
          hazardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder addHazards(org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard value) {
        if (hazardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHazardsIsMutable();
          hazards_.add(value);
          onChanged();
        } else {
          hazardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder addHazards(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard value) {
        if (hazardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHazardsIsMutable();
          hazards_.add(index, value);
          onChanged();
        } else {
          hazardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder addHazards(
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder builderForValue) {
        if (hazardsBuilder_ == null) {
          ensureHazardsIsMutable();
          hazards_.add(builderForValue.build());
          onChanged();
        } else {
          hazardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder addHazards(
          int index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder builderForValue) {
        if (hazardsBuilder_ == null) {
          ensureHazardsIsMutable();
          hazards_.add(index, builderForValue.build());
          onChanged();
        } else {
          hazardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder addAllHazards(
          java.lang.Iterable<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard> values) {
        if (hazardsBuilder_ == null) {
          ensureHazardsIsMutable();
          super.addAll(values, hazards_);
          onChanged();
        } else {
          hazardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder clearHazards() {
        if (hazardsBuilder_ == null) {
          hazards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          hazardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public Builder removeHazards(int index) {
        if (hazardsBuilder_ == null) {
          ensureHazardsIsMutable();
          hazards_.remove(index);
          onChanged();
        } else {
          hazardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder getHazardsBuilder(
          int index) {
        return getHazardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder getHazardsOrBuilder(
          int index) {
        if (hazardsBuilder_ == null) {
          return hazards_.get(index);  } else {
          return hazardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public java.util.List<? extends org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder> 
           getHazardsOrBuilderList() {
        if (hazardsBuilder_ != null) {
          return hazardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(hazards_);
        }
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder addHazardsBuilder() {
        return getHazardsFieldBuilder().addBuilder(
            org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.getDefaultInstance());
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder addHazardsBuilder(
          int index) {
        return getHazardsFieldBuilder().addBuilder(
            index, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.getDefaultInstance());
      }
      /**
       * <code>repeated .monkeyshines.World.Hazard hazards = 4;</code>
       */
      public java.util.List<org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder> 
           getHazardsBuilderList() {
        return getHazardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder> 
          getHazardsFieldBuilder() {
        if (hazardsBuilder_ == null) {
          hazardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.Hazard.Builder, org.erikaredmark.monkeyshines.encoder.proto.WorldFormatProtos.World.HazardOrBuilder>(
                  hazards_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          hazards_ = null;
        }
        return hazardsBuilder_;
      }

      // optional uint32 bonus_screen = 5;
      private int bonusScreen_ ;
      /**
       * <code>optional uint32 bonus_screen = 5;</code>
       *
       * <pre>
       * In the original game, this was always 10000. In fact, new levels
       * default to 10000
       * </pre>
       */
      public boolean hasBonusScreen() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 bonus_screen = 5;</code>
       *
       * <pre>
       * In the original game, this was always 10000. In fact, new levels
       * default to 10000
       * </pre>
       */
      public int getBonusScreen() {
        return bonusScreen_;
      }
      /**
       * <code>optional uint32 bonus_screen = 5;</code>
       *
       * <pre>
       * In the original game, this was always 10000. In fact, new levels
       * default to 10000
       * </pre>
       */
      public Builder setBonusScreen(int value) {
        bitField0_ |= 0x00000010;
        bonusScreen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bonus_screen = 5;</code>
       *
       * <pre>
       * In the original game, this was always 10000. In fact, new levels
       * default to 10000
       * </pre>
       */
      public Builder clearBonusScreen() {
        bitField0_ = (bitField0_ & ~0x00000010);
        bonusScreen_ = 0;
        onChanged();
        return this;
      }

      // optional string author = 6;
      private java.lang.Object author_ = "";
      /**
       * <code>optional string author = 6;</code>
       *
       * <pre>
       * Following fields were not available in original:
       * </pre>
       */
      public boolean hasAuthor() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string author = 6;</code>
       *
       * <pre>
       * Following fields were not available in original:
       * </pre>
       */
      public java.lang.String getAuthor() {
        java.lang.Object ref = author_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          author_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string author = 6;</code>
       *
       * <pre>
       * Following fields were not available in original:
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAuthorBytes() {
        java.lang.Object ref = author_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          author_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string author = 6;</code>
       *
       * <pre>
       * Following fields were not available in original:
       * </pre>
       */
      public Builder setAuthor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        author_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string author = 6;</code>
       *
       * <pre>
       * Following fields were not available in original:
       * </pre>
       */
      public Builder clearAuthor() {
        bitField0_ = (bitField0_ & ~0x00000020);
        author_ = getDefaultInstance().getAuthor();
        onChanged();
        return this;
      }
      /**
       * <code>optional string author = 6;</code>
       *
       * <pre>
       * Following fields were not available in original:
       * </pre>
       */
      public Builder setAuthorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        author_ = value;
        onChanged();
        return this;
      }

      // optional uint32 return_screen = 7;
      private int returnScreen_ ;
      /**
       * <code>optional uint32 return_screen = 7;</code>
       *
       * <pre>
       * Added as an attempt to make bonus screens, but is now calculated
       * dynamically. The value still exists in the world but is set during
       * gameplay.
       * </pre>
       */
      public boolean hasReturnScreen() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 return_screen = 7;</code>
       *
       * <pre>
       * Added as an attempt to make bonus screens, but is now calculated
       * dynamically. The value still exists in the world but is set during
       * gameplay.
       * </pre>
       */
      public int getReturnScreen() {
        return returnScreen_;
      }
      /**
       * <code>optional uint32 return_screen = 7;</code>
       *
       * <pre>
       * Added as an attempt to make bonus screens, but is now calculated
       * dynamically. The value still exists in the world but is set during
       * gameplay.
       * </pre>
       */
      public Builder setReturnScreen(int value) {
        bitField0_ |= 0x00000040;
        returnScreen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 return_screen = 7;</code>
       *
       * <pre>
       * Added as an attempt to make bonus screens, but is now calculated
       * dynamically. The value still exists in the world but is set during
       * gameplay.
       * </pre>
       */
      public Builder clearReturnScreen() {
        bitField0_ = (bitField0_ & ~0x00000040);
        returnScreen_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:monkeyshines.World)
    }

    static {
      defaultInstance = new World(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:monkeyshines.World)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_StringToGoodieTuple_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_StringToGoodieTuple_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_IntegerToLevelTuple_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_IntegerToLevelTuple_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Point_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Point_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Box_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Box_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Goodie_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Goodie_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Hazard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Hazard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_LevelScreen_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_LevelScreen_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Background_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Background_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Sprite_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Sprite_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_monkeyshines_World_Tile_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_monkeyshines_World_Tile_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nCorg/erikaredmark/monkeyshines/encoder/" +
      "proto/world_file_format.proto\022\014monkeyshi" +
      "nes\"\263\020\n\005World\022\014\n\004name\030\001 \001(\t\0228\n\007goodies\030\002" +
      " \003(\0132\'.monkeyshines.World.StringToGoodie" +
      "Tuple\0227\n\006levels\030\003 \003(\0132\'.monkeyshines.Wor" +
      "ld.IntegerToLevelTuple\022+\n\007hazards\030\004 \003(\0132" +
      "\032.monkeyshines.World.Hazard\022\024\n\014bonus_scr" +
      "een\030\005 \001(\r\022\016\n\006author\030\006 \001(\t\022\025\n\rreturn_scre" +
      "en\030\007 \001(\r\032K\n\023StringToGoodieTuple\022\013\n\003one\030\001" +
      " \002(\t\022\'\n\003two\030\002 \002(\0132\032.monkeyshines.World.G",
      "oodie\032P\n\023IntegerToLevelTuple\022\013\n\003one\030\001 \002(" +
      "\r\022,\n\003two\030\002 \002(\0132\037.monkeyshines.World.Leve" +
      "lScreen\032\035\n\005Point\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\032Z" +
      "\n\003Box\022*\n\007topLeft\030\001 \002(\0132\031.monkeyshines.Wo" +
      "rld.Point\022\'\n\004size\030\002 \002(\0132\031.monkeyshines.W" +
      "orld.Point\032T\n\006Goodie\022\n\n\002id\030\001 \001(\r\022\021\n\tscre" +
      "en_id\030\002 \001(\r\022+\n\010location\030\003 \001(\0132\031.monkeysh" +
      "ines.World.Point\032c\n\006Hazard\022\n\n\002id\030\001 \001(\r\022\020" +
      "\n\010explodes\030\002 \001(\010\022;\n\017death_animation\030\003 \001(" +
      "\0162\".monkeyshines.World.DeathAnimation\032\326\001",
      "\n\013LevelScreen\022\n\n\002id\030\001 \001(\r\0222\n\nbackground\030" +
      "\002 \001(\0132\036.monkeyshines.World.Background\0221\n" +
      "\016bonzo_location\030\003 \001(\0132\031.monkeyshines.Wor" +
      "ld.Point\022+\n\007sprites\030\004 \003(\0132\032.monkeyshines" +
      ".World.Sprite\022\'\n\005tiles\030\005 \003(\0132\030.monkeyshi" +
      "nes.World.Tile\032J\n\nBackground\022\n\n\002id\030\001 \001(\r" +
      "\0220\n\004type\030\002 \001(\0162\".monkeyshines.World.Back" +
      "groundType\032\210\003\n\006Sprite\022\n\n\002id\030\001 \001(\r\0221\n\016sta" +
      "rt_location\030\002 \001(\0132\031.monkeyshines.World.P" +
      "oint\022-\n\014bounding_box\030\003 \001(\0132\027.monkeyshine",
      "s.World.Box\0220\n\rinitial_speed\030\004 \001(\0132\031.mon" +
      "keyshines.World.Point\0224\n\tanimation\030\005 \001(\016" +
      "2!.monkeyshines.World.AnimationType\022;\n\017a" +
      "nimation_speed\030\006 \001(\0162\".monkeyshines.Worl" +
      "d.AnimationSpeed\022,\n\004type\030\007 \001(\0162\036.monkeys" +
      "hines.World.SpriteType\022=\n\020forced_directi" +
      "on\030\010 \001(\0162#.monkeyshines.World.ForcedDire" +
      "ction\032\233\001\n\004Tile\022\n\n\002id\030\001 \001(\r\022+\n\010location\030\002" +
      " \001(\0132\031.monkeyshines.World.Point\022*\n\004type\030" +
      "\003 \001(\0162\034.monkeyshines.World.TileType\022.\n\010r",
      "otation\030\004 \001(\0162\034.monkeyshines.World.Rotat" +
      "ion\"C\n\016DeathAnimation\022\020\n\014NORMAL_DEATH\020\000\022" +
      "\007\n\003BEE\020\001\022\010\n\004BURN\020\002\022\014\n\010ELECTRIC\020\003\"8\n\016Back" +
      "groundType\022\013\n\007PATTERN\020\001\022\010\n\004FULL\020\002\022\017\n\013SOL" +
      "ID_COLOR\020\003\":\n\rAnimationType\022\025\n\021INCREASIN" +
      "G_FRAMES\020\001\022\022\n\016CYLCING_FRAMES\020\002\",\n\016Animat" +
      "ionSpeed\022\020\n\014NORMAL_SPEED\020\001\022\010\n\004SLOW\020\002\"E\n\017" +
      "ForcedDirection\022\017\n\013FORCED_NONE\020\001\022\020\n\014FORC" +
      "ED_RIGHT\020\002\022\017\n\013FORCED_LEFT\020\003\"]\n\nSpriteTyp" +
      "e\022\n\n\006NORMAL\020\001\022\020\n\014HEALTH_DRAIN\020\002\022\r\n\tEXIT_",
      "DOOR\020\003\022\016\n\nBONUS_DOOR\020\004\022\022\n\016SCENERY_SPRITE" +
      "\020\005\"^\n\010TileType\022\t\n\005SOLID\020\001\022\010\n\004THRU\020\002\022\013\n\007S" +
      "CENERY\020\003\022\n\n\006HAZARD\020\004\022\014\n\010CONVEYER\020\005\022\014\n\010BR" +
      "EAKING\020\006\022\010\n\004NONE\020\007\"-\n\010Rotation\022\r\n\tCLOCKW" +
      "ISE\020\001\022\022\n\016ANTI_CLOCKWISE\020\002B@\n+org.erikare" +
      "dmark.monkeyshines.encoder.protoB\021WorldF" +
      "ormatProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_monkeyshines_World_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_monkeyshines_World_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_descriptor,
              new java.lang.String[] { "Name", "Goodies", "Levels", "Hazards", "BonusScreen", "Author", "ReturnScreen", });
          internal_static_monkeyshines_World_StringToGoodieTuple_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(0);
          internal_static_monkeyshines_World_StringToGoodieTuple_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_StringToGoodieTuple_descriptor,
              new java.lang.String[] { "One", "Two", });
          internal_static_monkeyshines_World_IntegerToLevelTuple_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(1);
          internal_static_monkeyshines_World_IntegerToLevelTuple_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_IntegerToLevelTuple_descriptor,
              new java.lang.String[] { "One", "Two", });
          internal_static_monkeyshines_World_Point_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(2);
          internal_static_monkeyshines_World_Point_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Point_descriptor,
              new java.lang.String[] { "X", "Y", });
          internal_static_monkeyshines_World_Box_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(3);
          internal_static_monkeyshines_World_Box_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Box_descriptor,
              new java.lang.String[] { "TopLeft", "Size", });
          internal_static_monkeyshines_World_Goodie_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(4);
          internal_static_monkeyshines_World_Goodie_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Goodie_descriptor,
              new java.lang.String[] { "Id", "ScreenId", "Location", });
          internal_static_monkeyshines_World_Hazard_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(5);
          internal_static_monkeyshines_World_Hazard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Hazard_descriptor,
              new java.lang.String[] { "Id", "Explodes", "DeathAnimation", });
          internal_static_monkeyshines_World_LevelScreen_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(6);
          internal_static_monkeyshines_World_LevelScreen_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_LevelScreen_descriptor,
              new java.lang.String[] { "Id", "Background", "BonzoLocation", "Sprites", "Tiles", });
          internal_static_monkeyshines_World_Background_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(7);
          internal_static_monkeyshines_World_Background_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Background_descriptor,
              new java.lang.String[] { "Id", "Type", });
          internal_static_monkeyshines_World_Sprite_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(8);
          internal_static_monkeyshines_World_Sprite_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Sprite_descriptor,
              new java.lang.String[] { "Id", "StartLocation", "BoundingBox", "InitialSpeed", "Animation", "AnimationSpeed", "Type", "ForcedDirection", });
          internal_static_monkeyshines_World_Tile_descriptor =
            internal_static_monkeyshines_World_descriptor.getNestedTypes().get(9);
          internal_static_monkeyshines_World_Tile_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_monkeyshines_World_Tile_descriptor,
              new java.lang.String[] { "Id", "Location", "Type", "Rotation", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
