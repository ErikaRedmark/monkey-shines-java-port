package edu.nova.erikaredmark.monkeyshines.encoder;

import edu.nova.erikaredmark.monkeyshines.Conveyer.Rotation;


/**
 * 
 * Encoded form of a specific instance of a conveyer as a tile in the world. The id
 * times 2, plus 1 if the rotation is anti-clockwise, is enough to map to the autogenerated
 * list of conveyers.
 * As with all other state dependent tiles, no 'state' is persisted and state is restarted
 * with defaults upon the world loading.
 * 
 * @author Erika Redmark
 *
 */
public final class EncodedConveyerTile implements EncodableTileType {
	private static final long serialVersionUID = 10L;
	
	// Together these are enough to map to a Conveyer instance
	private final int conveyerId;
	private final Rotation rotation;
	
	/**
	 * 
	 * Unlike other encoded forms, this must be explicitly built with primitive parts. The actual
	 * Conveyer instance is easily indicated by combining Id with Rotation, so there is no need to
	 * store any further mappings.
	 * 
	 * @param conveyerId
	 * 		the id of the Conveyer instance backing this conveyer tile
	 * 
	 * @param rotation
	 * 		the rotation of the Conveyer instance backing this conveyer tile
	 * 
	 */
	public EncodedConveyerTile(final int conveyerId, final Rotation rotation) {
		this.conveyerId = conveyerId;
		this.rotation = rotation;
	}
	
	public int getId() { return conveyerId; }
	public Rotation getRotation() { return rotation; }
	
}
